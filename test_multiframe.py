"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—É–ª—å—Ç–∏–ø–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.utils.logger import setup_main_logger
from src.main import MexcAnalysisBot
import logging

def test_multiframe_bot():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–∞—Ä –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_main_logger()
    logger = logging.getLogger(__name__)
    
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—É–ª—å—Ç–∏–ø–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_pairs = ["BTC_USDT", "ETH_USDT"]
    test_timeframes = ["Min1", "Min5"]
    
    logger.info(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã: {test_pairs}")
    logger.info(f"‚è∞ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {test_timeframes}")
    
    try:
        # –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        bot = MexcAnalysisBot(pairs=test_pairs, timeframes=test_timeframes)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        signals = bot.run_single_analysis()
        
        logger.info(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {len(test_pairs) * len(test_timeframes)}")
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals) if signals else 0}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bot._print_detailed_statistics()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
    
    return True

def test_full_config_bot():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º –∏–∑ config.py
    """
    logger = logging.getLogger(__name__)
    
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º")
    
    try:
        # –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        bot = MexcAnalysisBot()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        signals = bot.run_single_analysis()
        
        logger.info(f"‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals) if signals else 0}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞ MEXC Futures")
    print("=" * 60)
    
    # –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    success1 = test_multiframe_bot()
    
    print("\n" + "=" * 60)
    
    # –ó–∞—Ç–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
    success2 = test_full_config_bot()
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç: {'‚úÖ –ü–†–û–®–Å–õ' if success1 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"   ‚Ä¢ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç: {'‚úÖ –ü–†–û–®–Å–õ' if success2 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    
    if success1 and success2:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ú—É–ª—å—Ç–∏–ø–∞—Ä–Ω—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
