#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å MEXC Futures
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ 750+ –ø–∞—Ä
"""

import sys
import os
import time
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.data.pairs_fetcher import MexcPairsFetcher, get_all_futures_pairs, get_pairs_fetcher
from src.utils.logger import setup_logger

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logger(__name__, "INFO")
    
    print("=" * 60)
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø MEXC PAIRS FETCHER")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä
    print("\nüìä –¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä")
    print("-" * 40)
    
    start_time = time.time()
    pairs = get_all_futures_pairs(force_update=True)
    fetch_time = time.time() - start_time
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–∞—Ä: {len(pairs)}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {fetch_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    if pairs:
        print(f"üìù –ü–µ—Ä–≤—ã–µ 10 –ø–∞—Ä: {pairs[:10]}")
        print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–∞—Ä: {pairs[-5:]}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
        return
    
    # –¢–µ—Å—Ç 2: –†–∞–±–æ—Ç–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–µ—Ç—á–µ—Ä–æ–º
    print("\nüîß –¢–ï–°–¢ 2: –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–µ—Ç—á–µ—Ä–æ–º")
    print("-" * 50)
    
    fetcher = MexcPairsFetcher(update_interval=60)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –¥–µ–º–æ
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä
    print("\nüîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä:")
    
    # USDT –ø–∞—Ä—ã
    usdt_pairs = fetcher.get_pairs_by_quote_coin('USDT')
    print(f"  ‚Ä¢ USDT –ø–∞—Ä—ã: {len(usdt_pairs)}")
    if usdt_pairs:
        print(f"    –ü—Ä–∏–º–µ—Ä—ã: {usdt_pairs[:5]}")
    
    # BTC –ø–∞—Ä—ã
    btc_pairs = fetcher.get_pairs_by_quote_coin('BTC')
    print(f"  ‚Ä¢ BTC –ø–∞—Ä—ã: {len(btc_pairs)}")
    if btc_pairs:
        print(f"    –ü—Ä–∏–º–µ—Ä—ã: {btc_pairs[:3]}")
    
    # ETH –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä—ã
    eth_base_pairs = fetcher.get_pairs_by_base_coin('ETH')
    print(f"  ‚Ä¢ ETH –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä—ã: {len(eth_base_pairs)}")
    if eth_base_pairs:
        print(f"    –ü—Ä–∏–º–µ—Ä—ã: {eth_base_pairs[:3]}")
    
    # –¢–µ—Å—Ç 3: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∞—Ö
    print("\nüìã –¢–ï–°–¢ 3: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö")
    print("-" * 52)
    
    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ USDT –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    sample_pairs = usdt_pairs[:3] if usdt_pairs else pairs[:3]
    
    for pair in sample_pairs:
        pair_info = fetcher.get_pair_info(pair)
        if pair_info:
            print(f"\nüî∏ {pair}:")
            print(f"    –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {pair_info.base_coin}")
            print(f"    –ö–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞: {pair_info.quote_coin}")
            print(f"    –ú–∞–∫—Å. –ø–ª–µ—á–æ: {pair_info.max_leverage}x")
            print(f"    –ú–∏–Ω. –ø–ª–µ—á–æ: {pair_info.min_leverage}x")
            print(f"    –®–∫–∞–ª–∞ —Ü–µ–Ω—ã: {pair_info.price_scale}")
            print(f"    –ö–æ–º–∏—Å—Å–∏—è maker: {pair_info.maker_fee_rate}")
            print(f"    –ö–æ–º–∏—Å—Å–∏—è taker: {pair_info.taker_fee_rate}")
            print(f"    –ú–∏–Ω. –æ–±—ä—ë–º: {pair_info.min_vol}")
            print(f"    –ú–∞–∫—Å. –æ–±—ä—ë–º: {pair_info.max_vol}")
            print(f"    –ù–æ–≤–∞—è –ø–∞—Ä–∞: {'–î–∞' if pair_info.is_new else '–ù–µ—Ç'}")
            if pair_info.concept_plate:
                print(f"    –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏: {', '.join(pair_info.concept_plate)}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n‚ö° –¢–ï–°–¢ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("-" * 58)
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º)
    start_time = time.time()
    pairs_1 = fetcher.get_all_pairs(force_update=True)
    time_1 = time.time() - start_time
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫—ç—à–∞)
    start_time = time.time()
    pairs_2 = fetcher.get_all_pairs(force_update=False)
    time_2 = time.time() - start_time
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print(f"  ‚Ä¢ –° –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º: {time_1:.3f}s ({len(pairs_1)} –ø–∞—Ä)")
    print(f"  ‚Ä¢ –ò–∑ –∫—ç—à–∞: {time_2:.3f}s ({len(pairs_2)} –ø–∞—Ä)")
    print(f"  ‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∫—ç—à–∞: {time_1/time_2:.1f}x")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
    cache_info = fetcher.get_cache_info()
    print(f"\nüíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ:")
    for key, value in cache_info.items():
        if key != 'stats':
            print(f"  ‚Ä¢ {key}: {value}")
    
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    for key, value in cache_info['stats'].items():
        print(f"  ‚Ä¢ {key}: {value}")
    
    # –¢–µ—Å—Ç 5: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    print("\nüîÑ –¢–ï–°–¢ 5: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–¥–µ–º–æ)")
    print("-" * 45)
    
    print("–ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    fetcher.start_auto_update()
    
    print("–û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥...")
    time.sleep(5)
    
    cache_info_after = fetcher.get_cache_info()
    print(f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: {cache_info_after['auto_update_running']}")
    
    print("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    fetcher.stop_auto_update()
    
    # –¢–µ—Å—Ç 6: –ê–Ω–∞–ª–∏–∑ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä
    print("\nüéØ –¢–ï–°–¢ 6: –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é")
    print("-" * 52)
    
    total_pairs = len(pairs)
    usdt_count = len(usdt_pairs)
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {total_pairs}")
    print(f"  ‚Ä¢ USDT –ø–∞—Ä—ã: {usdt_count} ({usdt_count/total_pairs*100:.1f}%)")
    print(f"  ‚Ä¢ –ü–∞–º—è—Ç—å –Ω–∞ –ø–∞—Ä—É: ~{sys.getsizeof(pairs[0]) if pairs else 0} –±–∞–π—Ç")
    print(f"  ‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è 750 –ø–∞—Ä: ~{sys.getsizeof(pairs[0]) * 750 / 1024:.1f} –ö–ë")
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä
    if total_pairs > 100:
        sample_size = min(100, total_pairs)
        start_time = time.time()
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä
        for pair in pairs[:sample_size]:
            info = fetcher.get_pair_info(pair)
            # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
            if info and info.max_leverage > 50:
                pass
        
        process_time = time.time() - start_time
        estimated_time_750 = (process_time / sample_size) * 750
        
        print(f"\n‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è –¥–ª—è {sample_size} –ø–∞—Ä: {process_time:.3f}s")
        print(f"  ‚Ä¢ –û—Ü–µ–Ω–∫–∞ –¥–ª—è 750 –ø–∞—Ä: {estimated_time_750:.3f}s")
        print(f"  ‚Ä¢ –ü–∞—Ä –≤ —Å–µ–∫—É–Ω–¥—É: {sample_size/process_time:.1f}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 40)
    print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
    print("‚úÖ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä –¥–æ—Å—Ç—É–ø–Ω–∞")
    print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∞—Ö")
    
    if total_pairs >= 500:
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 750+ –ø–∞—Ä–∞–º–∏!")
    else:
        print(f"‚ö†Ô∏è  –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä ({total_pairs}) –º–µ–Ω—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ")
    
    print("\n" + "=" * 60)
    print("‚ú® –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚õî –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()