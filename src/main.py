"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –Ω–∞ MEXC Futures

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:
- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ REST API
- –ê–Ω–∞–ª–∏–∑ —Å–ø–∞–π–∫–æ–≤ –æ–±—ä—ë–º–∞
- –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram

–í–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º—É–ª—å—Ç–∏–ø–∞—Ä–Ω–æ—Å—Ç–∏ –∏ –º—É–ª—å—Ç–∏-—Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑–∞
–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 750+ –ø–∞—Ä —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å–ø–∏—Å–∫–æ–º
"""

import time
import logging
import asyncio
from asyncio import TaskGroup
from typing import Optional, List, Dict, Tuple, Set, Callable
from dataclasses import dataclass
from datetime import datetime
import threading

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from src.utils.logger import setup_main_logger
from src.data.rest_client import MexcRestClient
from src.data.async_rest_client import AsyncMexcRestClient
from src.data.database import SignalsManager
from src.data.pairs_fetcher import get_pairs_fetcher, MexcPairsFetcher
from src.signals.detector import VolumeSpikeDetector, VolumeSignal
from src.telegram.bot import TelegramNotifier
from src.config import TRADING_PAIRS, TIMEFRAMES, TIMEFRAME_CONFIGS, DATABASE_CONFIG, CACHE_CONFIG, PAIRS_FETCHER_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


@dataclass
class PairAnalysisTask:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä—ã"""
    pair: str
    timeframe: str
    task: Optional[asyncio.Task] = None
    last_run: Optional[datetime] = None
    error_count: int = 0
    max_errors: int = 5
    last_run: Optional[datetime] = None
    error_count: int = 0
    max_errors: int = 5


class AsyncMexcAnalysisBot:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –Ω–∞ MEXC Futures
    
    –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
    - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∏–∑ pairs_fetcher (750+ –ø–∞—Ä)
    - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞
    - –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
    - –ò–∑–æ–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ - —Å–±–æ–π –æ–¥–Ω–æ–π –ø–∞—Ä—ã –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    """
    
    def __init__(self, timeframes: List[str] = None, 
                 analysis_interval: int = 60,
                 pairs_update_interval: int = 3600):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        
        Args:
            timeframes (List[str]): –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_interval (int): –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            pairs_update_interval (int): –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º—É–ª—å—Ç–∏–ø–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ MEXC Futures...")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.timeframes = timeframes or TIMEFRAMES
        self.analysis_interval = analysis_interval
        self.pairs_update_interval = pairs_update_interval        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.async_client = AsyncMexcRestClient(
            max_connections=100,  # –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è 750+ –ø–∞—Ä
            max_connections_per_host=30,
            request_timeout=10
        )
        self.signals_detector = VolumeSpikeDetector()
        self.telegram_notifier = TelegramNotifier()
        self.signals_manager = SignalsManager(DATABASE_CONFIG, CACHE_CONFIG)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–µ—Ç—á–µ—Ä –ø–∞—Ä —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        self.pairs_fetcher = get_pairs_fetcher(self.pairs_update_interval)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.current_pairs: Set[str] = set()
        self.running_tasks: Dict[str, PairAnalysisTask] = {}  # key: f"{pair}_{timeframe}"
        self.shutdown_event = asyncio.Event()
        self.pairs_update_task: Optional[asyncio.Task] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_analyses = 0
        self.total_signals = 0
        self.analysis_stats: Dict[str, Dict[str, Dict]] = {}
        
        logger.info(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(self.timeframes)}")
        logger.info(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞: {analysis_interval}s")
        logger.info(f"üì° –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä: {pairs_update_interval}s")
        logger.info("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º—É–ª—å—Ç–∏–ø–∞—Ä–Ω—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _init_pair_stats(self, pair: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–∞—Ä—ã"""
        if pair not in self.analysis_stats:
            self.analysis_stats[pair] = {}
            for timeframe in self.timeframes:
                self.analysis_stats[pair][timeframe] = {
                    'analyses': 0,
                    'signals': 0,
                    'errors': 0,
                    'last_signal': None,
                    'last_analysis': None
                }

    async def get_dynamic_pairs(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã —á–µ—Ä–µ–∑ pairs_fetcher
            pairs = self.pairs_fetcher.get_all_pairs()
            
            if pairs:
                logger.debug(f"üì° –ü–æ–ª—É—á–µ–Ω–æ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –æ—Ç API")
                return pairs
            else:
                # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—ã –æ—Ç API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return TRADING_PAIRS
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä: {e}")
            return TRADING_PAIRS  # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫

    async def analyze_pair_timeframe_async(self, pair: str, timeframe: str) -> Optional[VolumeSignal]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
        
        Args:
            pair (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC_USDT)
            timeframe (str): –¢–∞–π–º—Ñ—Ä–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, Min1)
            
        Returns:
            VolumeSignal: –ù–∞–π–¥–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            tf_config = TIMEFRAME_CONFIGS.get(timeframe, {
                'limit': 50,
                'window': 10,
                'threshold': 2.0
            })
              # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π REST API
            logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pair} ({timeframe})...")
            
            klines = await self.async_client.get_klines_async(
                pair=pair,
                interval=timeframe,
                limit=tf_config['limit']
            )
            
            if not klines:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {pair} ({timeframe})")
                return None
            
            # –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            detector = VolumeSpikeDetector(
                threshold=tf_config['threshold'],
                window_size=tf_config['window']
            )
              # –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∞–π–∫–∏ –æ–±—ä—ë–º–∞ (—Ç–æ–∂–µ –≤ executor –¥–ª—è CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
            signal = await asyncio.to_thread(
                detector.analyze_volume_spike,
                klines, pair, timeframe
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_analysis_stats(pair, timeframe, signal)
            
            # –®–∞–≥ 4: –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if signal:
                logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è {pair} ({timeframe}): {signal.message}")
                  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫—ç—à
                await asyncio.to_thread(self.signals_manager.save_signal, signal)
                logger.debug(f"üíæ –°–∏–≥–Ω–∞–ª –¥–ª—è {pair} ({timeframe}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
                  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram
                success = await asyncio.to_thread(self.telegram_notifier.send_volume_signal, signal)
                if success:
                    logger.info(f"üì§ –°–∏–≥–Ω–∞–ª –¥–ª—è {pair} ({timeframe}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair} ({timeframe})")
                
                return signal
            else:
                logger.debug(f"‚úÖ –ê–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–ª—è {pair} ({timeframe})")
                return None
                
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {pair} ({timeframe}): {e}")
            self._update_error_stats(pair, timeframe)
            return None
    
    def _update_analysis_stats(self, pair: str, timeframe: str, signal: Optional[VolumeSignal]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        self._init_pair_stats(pair)
        
        self.analysis_stats[pair][timeframe]['analyses'] += 1
        self.analysis_stats[pair][timeframe]['last_analysis'] = datetime.now()
        self.total_analyses += 1
        
        if signal:
            self.analysis_stats[pair][timeframe]['signals'] += 1
            self.analysis_stats[pair][timeframe]['last_signal'] = signal
            self.total_signals += 1
    
    def _update_error_stats(self, pair: str, timeframe: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        self._init_pair_stats(pair)
        self.analysis_stats[pair][timeframe]['errors'] += 1

    async def continuous_pair_analysis(self, pair: str, timeframe: str):
        """
        –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
        
        –≠—Ç–∞ –∫–æ—Ä—É—Ç–∏–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –æ–¥–Ω—É –ø–∞—Ä—É/—Ç–∞–π–º—Ñ—Ä–µ–π–º
        —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ shutdown.
        """
        task_key = f"{pair}_{timeframe}"
        error_count = 0
        max_errors = 5
        
        logger.debug(f"üîÑ –ó–∞–ø—É—â–µ–Ω –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {pair} ({timeframe})")
        
        try:
            while not self.shutdown_event.is_set():
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                    signal = await self.analyze_pair_timeframe_async(pair, timeframe)
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
                    error_count = 0
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
                    if task_key in self.running_tasks:
                        self.running_tasks[task_key].last_run = datetime.now()
                        self.running_tasks[task_key].error_count = error_count
                
                except Exception as e:
                    error_count += 1
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ {pair} ({timeframe}): {e} (–æ—à–∏–±–∫–∞ {error_count}/{max_errors})")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ –∑–∞–¥–∞—á–µ
                    if task_key in self.running_tasks:
                        self.running_tasks[task_key].error_count = error_count
                    
                    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç—É –∑–∞–¥–∞—á—É
                    if error_count >= max_errors:
                        logger.error(f"üö´ –ó–∞–¥–∞—á–∞ {pair} ({timeframe}) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –æ—à–∏–±–æ–∫")
                        break
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ shutdown
                try:
                    await asyncio.wait_for(
                        self.shutdown_event.wait(), 
                        timeout=self.analysis_interval
                    )
                    break  # –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª shutdown
                except asyncio.TimeoutError:
                    continue  # –¢–∞–π–º–∞—É—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑
                    
        except asyncio.CancelledError:
            logger.debug(f"üõë –ó–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ {pair} ({timeframe}) –æ—Ç–º–µ–Ω–µ–Ω–∞")
            raise
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –∞–Ω–∞–ª–∏–∑–∞ {pair} ({timeframe}): {e}")
        finally:
            logger.debug(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ {pair} ({timeframe})")

    async def update_pairs_and_tasks(self):
        """
        –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        
        –≠—Ç–∞ –∫–æ—Ä—É—Ç–∏–Ω–∞:
        1. –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
        2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        3. –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä
        4. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä
        """
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏")
        
        while not self.shutdown_event.is_set():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
                new_pairs = await self.get_dynamic_pairs()
                new_pairs_set = set(new_pairs)
                
                logger.debug(f"üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä {len(self.current_pairs)}, –Ω–æ–≤—ã—Ö {len(new_pairs_set)}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                added_pairs = new_pairs_set - self.current_pairs
                removed_pairs = self.current_pairs - new_pairs_set
                
                if added_pairs or removed_pairs:
                    logger.info(f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –ø–∞—Ä: +{len(added_pairs)}, -{len(removed_pairs)}")
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä
                    if removed_pairs:
                        await self._stop_tasks_for_pairs(removed_pairs)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä
                    if added_pairs:
                        await self._start_tasks_for_pairs(added_pairs)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
                    self.current_pairs = new_pairs_set
                    
                    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(self.running_tasks)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —É–ø–∞–≤—à–∏–µ
                await self._check_and_restart_failed_tasks()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä: {e}")
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ shutdown
            try:
                await asyncio.wait_for(
                    self.shutdown_event.wait(), 
                    timeout=self.pairs_update_interval
                )
                break  # –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª shutdown
            except asyncio.TimeoutError:
                continue  # –¢–∞–π–º–∞—É—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

    async def _start_tasks_for_pairs(self, pairs: Set[str]):
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä"""
        for pair in pairs:
            for timeframe in self.timeframes:
                task_key = f"{pair}_{timeframe}"
                
                if task_key not in self.running_tasks:
                    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                    task = asyncio.create_task(
                        self.continuous_pair_analysis(pair, timeframe),
                        name=task_key
                    )
                    
                    self.running_tasks[task_key] = PairAnalysisTask(
                        pair=pair,
                        timeframe=timeframe,
                        task=task,
                        last_run=None,
                        error_count=0
                    )
                    
                    logger.debug(f"‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ {pair} ({timeframe})")

    async def _stop_tasks_for_pairs(self, pairs: Set[str]):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä"""
        tasks_to_remove = []
        
        for task_key, task_info in self.running_tasks.items():
            if task_info.pair in pairs:
                # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
                if task_info.task and not task_info.task.done():
                    task_info.task.cancel()
                    try:
                        await task_info.task
                    except asyncio.CancelledError:
                        pass
                
                tasks_to_remove.append(task_key)
                logger.debug(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ {task_info.pair} ({task_info.timeframe})")
        
        # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        for task_key in tasks_to_remove:
            del self.running_tasks[task_key]

    async def _check_and_restart_failed_tasks(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É–ø–∞–≤—à–∏—Ö –∑–∞–¥–∞—á"""
        failed_tasks = []
        
        for task_key, task_info in self.running_tasks.items():
            if task_info.task and task_info.task.done():
                # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É
                try:
                    await task_info.task  # –ü–æ–ª—É—á–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ
                except asyncio.CancelledError:
                    # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    continue
                except Exception as e:
                    logger.error(f"üí• –ó–∞–¥–∞—á–∞ {task_key} —É–ø–∞–ª–∞ —Å –æ—à–∏–±–∫–æ–π: {e}")
                
                # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
                if task_info.error_count < task_info.max_errors:
                    failed_tasks.append(task_key)
                else:
                    logger.warning(f"üö´ –ó–∞–¥–∞—á–∞ {task_key} –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—à–∏–±–æ–∫)")
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —É–ø–∞–≤—à–∏–µ –∑–∞–¥–∞—á–∏
        for task_key in failed_tasks:
            task_info = self.running_tasks[task_key]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            new_task = asyncio.create_task(
                self.continuous_pair_analysis(task_info.pair, task_info.timeframe),
                name=task_key
            )
            
            task_info.task = new_task
            logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_key}")

    async def run_async(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç TaskGroup (Python 3.11+) –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º—É–ª—å—Ç–∏–ø–∞—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await asyncio.to_thread(self.telegram_notifier.send_startup_notification)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ—Ç—á–µ—Ä –ø–∞—Ä –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
        self.pairs_fetcher.start_auto_update()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
            initial_pairs = await self.get_dynamic_pairs()
            self.current_pairs = set(initial_pairs)
            
            logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫: {len(self.current_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            logger.info(f"‚è∞ –ê–Ω–∞–ª–∏–∑ {len(self.timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {', '.join(self.timeframes)}")
            logger.info(f"üéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞: {len(self.current_pairs) * len(self.timeframes)}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º TaskGroup –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏
            async with TaskGroup() as tg:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–∏
                self.pairs_update_task = tg.create_task(
                    self.update_pairs_and_tasks(),
                    name="pairs_updater"
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
                await self._start_tasks_for_pairs(self.current_pairs)
                
                logger.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
                logger.info("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
                
                # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                await self.shutdown_event.wait()
                
        except* Exception as eg:
            # TaskGroup –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
            logger.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ:")
            for e in eg.exceptions:
                logger.error(f"   {type(e).__name__}: {e}")
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            await self._cleanup()

    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä
        if self.pairs_fetcher:
            self.pairs_fetcher.stop_auto_update()
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
        for task_key, task_info in self.running_tasks.items():
            if task_info.task and not task_info.task.done():
                task_info.task.cancel()
                try:
                    await task_info.task
                except asyncio.CancelledError:
                    pass
          # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if hasattr(self.async_client, 'close'):
            await self.async_client.close()
          # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        await asyncio.to_thread(self.signals_manager.close)
        
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def stop(self):
        """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        self.shutdown_event.set()

    def get_system_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'total_pairs': len(self.current_pairs),
            'total_tasks': len(self.running_tasks),
            'total_analyses': self.total_analyses,
            'total_signals': self.total_signals,
            'timeframes': self.timeframes,
            'analysis_interval': self.analysis_interval,
            'pairs_update_interval': self.pairs_update_interval,
            'running': not self.shutdown_event.is_set()
        }

    def print_system_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        status = self.get_system_status()
        
        logger.info("üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–°–ò–ù–•–†–û–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ ===")
        logger.info(f"üìà –í—Å–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {status['total_pairs']}")
        logger.info(f"‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞: {status['total_tasks']}")
        logger.info(f"üîç –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {status['total_analyses']}")
        logger.info(f"üéØ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {status['total_signals']}")
        logger.info(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(status['timeframes'])}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º
        if self.analysis_stats:
            active_pairs = len([p for p in self.analysis_stats.keys() if p in self.current_pairs])
            logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {active_pairs}")


# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ API
class MexcAnalysisBot:
    """
    –û–±—Ä–∞—Ç–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    
    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ—Ç –∂–µ API, —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ, –Ω–æ –≤–Ω—É—Ç—Ä–∏
    –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.
    """
    
    def __init__(self, pairs: List[str] = None, timeframes: List[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é"""
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (—Ä–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.trading_pairs = pairs or TRADING_PAIRS
        self.timeframes = timeframes or TIMEFRAMES
        
        # –°—Ç–∞—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.rest_client = MexcRestClient()
        self.volume_detector = VolumeSpikeDetector()
        self.telegram_notifier = TelegramNotifier()
        self.signals_manager = SignalsManager(DATABASE_CONFIG, CACHE_CONFIG)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.analysis_stats = {}
        self.total_analyses = 0
        self.total_signals = 0
        
        self._init_statistics()
        logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)")
    
    def _init_statistics(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        for pair in self.trading_pairs:
            self.analysis_stats[pair] = {}
            for timeframe in self.timeframes:
                self.analysis_stats[pair][timeframe] = {
                    'analyses': 0,
                    'signals': 0,
                    'last_signal': None
                }
    
    def analyze_pair_timeframe(self, pair: str, timeframe: str) -> Optional[VolumeSignal]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        # ...existing synchronous implementation...
        try:
            tf_config = TIMEFRAME_CONFIGS.get(timeframe, {
                'limit': 50, 'window': 10, 'threshold': 2.0
            })
            
            klines = self.rest_client.get_klines(pair=pair, interval=timeframe, limit=tf_config['limit'])
            if not klines:
                return None
            
            detector = VolumeSpikeDetector(threshold=tf_config['threshold'], window_size=tf_config['window'])
            signal = detector.analyze_volume_spike(klines, pair, timeframe)
            
            self.analysis_stats[pair][timeframe]['analyses'] += 1
            self.total_analyses += 1
            
            if signal:
                self.signals_manager.save_signal(signal)
                self.telegram_notifier.send_volume_signal(signal)
                self.analysis_stats[pair][timeframe]['signals'] += 1
                self.analysis_stats[pair][timeframe]['last_signal'] = signal
                self.total_signals += 1
            
            return signal
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {pair} ({timeframe}): {e}")
            return None
    
    def analyze_single_iteration(self) -> List[VolumeSignal]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        all_signals = []
        for pair in self.trading_pairs:
            for timeframe in self.timeframes:
                signal = self.analyze_pair_timeframe(pair, timeframe)
                if signal:
                    all_signals.append(signal)
        return all_signals
    
    def run_single_analysis(self):
        """–û–¥–∏–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return self.analyze_single_iteration()
    
    def run_continuous_analysis(self, interval_seconds: int = 60):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)"""
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval_seconds} —Å–µ–∫—É–Ω–¥")
        
        try:
            iteration = 0
            while True:
                iteration += 1
                logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ #{iteration}")
                self.analyze_single_iteration()
                time.sleep(interval_seconds)
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
            self.stop()
    
    def _print_detailed_statistics(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–æ–≤: {self.total_analyses}, –°–∏–≥–Ω–∞–ª–æ–≤: {self.total_signals}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        self.signals_manager.close()
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def get_signals_history(self, pair: str = None, timeframe: str = None, limit: int = 50):
        return self.signals_manager.get_signals_history(pair=pair, timeframe=timeframe, limit=limit)
    
    def get_database_statistics(self):
        return self.signals_manager.get_full_statistics()
    
    def export_signals_history(self, filepath: str, pair: str = None, timeframe: str = None, limit: int = 1000):
        return self.signals_manager.export_signals(filepath, pair, timeframe, limit)
    
    def print_database_statistics(self):
        try:
            stats = self.get_database_statistics()
            logger.info("üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")
            db_stats = stats.get('database', {})
            logger.info(f"üíæ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î: {db_stats.get('total_signals', 0)}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")


async def main_async():
    """
    –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_main_logger()
    
    logger.info("üéØ –ó–∞–ø—É—Å–∫ –ê–°–ò–ù–•–†–û–ù–ù–û–ì–û –º—É–ª—å—Ç–∏–ø–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π MEXC Futures")
    logger.info("üöÄ –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ 750+ –ø–∞—Ä, –ø–æ–ª–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å")
    logger.info("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        bot = AsyncMexcAnalysisBot(
            timeframes=TIMEFRAMES,  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
            analysis_interval=60,    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            pairs_update_interval=3600  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä (1 —á–∞—Å)
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        await bot.run_async()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
        if 'bot' in locals():
            bot.stop()
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise


def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    """
    try:
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        asyncio.run(main_async())
        return 0
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    exit(main())
