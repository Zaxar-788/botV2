"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –Ω–∞ MEXC Futures

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:
- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ REST API
- –ê–Ω–∞–ª–∏–∑ —Å–ø–∞–π–∫–æ–≤ –æ–±—ä—ë–º–∞
- –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram

MVP –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã BTC_USDT
"""

import time
import logging
from typing import Optional

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from src.utils.logger import setup_main_logger
from src.data.rest_client import MexcRestClient
from src.signals.detector import VolumeSpikeDetector, VolumeSignal
from src.telegram.bot import TelegramNotifier
from src.config import TRADING_PAIR, KLINE_LIMIT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class MexcAnalysisBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –Ω–∞ MEXC Futures
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏—è—Ö –æ–±—ä—ë–º–∞.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ MEXC Futures...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.rest_client = MexcRestClient()
        self.volume_detector = VolumeSpikeDetector()
        self.telegram_notifier = TelegramNotifier()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
        self.analysis_count = 0
        self.signals_sent = 0
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def analyze_single_iteration(self) -> Optional[VolumeSignal]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
        
        Returns:
            VolumeSignal: –ù–∞–π–¥–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None
        """
        try:
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ REST API
            logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {TRADING_PAIR}...")
            klines = self.rest_client.get_klines(
                pair=TRADING_PAIR,
                limit=KLINE_LIMIT
            )
            
            if not klines:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏")
                return None
            
            # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∞–π–∫–∏ –æ–±—ä—ë–º–∞
            logger.debug(f"üîç –ê–Ω–∞–ª–∏–∑ {len(klines)} —Å–≤–µ—á–µ–π –Ω–∞ —Å–ø–∞–π–∫–∏ –æ–±—ä—ë–º–∞...")
            signal = self.volume_detector.analyze_volume_spike(klines, TRADING_PAIR)
            
            self.analysis_count += 1
            
            # –®–∞–≥ 3: –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if signal:
                logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal.message}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram (–ø–æ–∫–∞ print)
                success = self.telegram_notifier.send_volume_signal(signal)
                if success:
                    self.signals_sent += 1
                    logger.info("üì§ –°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞")
                
                return signal
            else:
                logger.debug("‚úÖ –ê–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                return None
                
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return None
    
    def run_continuous_analysis(self, interval_seconds: int = 60):
        """
        –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        
        Args:
            interval_seconds (int): –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval_seconds} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –ø–∞—Ä–∞: {TRADING_PAIR}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        self.telegram_notifier.send_startup_notification()
        
        try:
            while True:
                logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ #{self.analysis_count + 1}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                signal = self.analyze_single_iteration()
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –∏—Ç–µ—Ä–∞—Ü–∏–π
                if self.analysis_count % 10 == 0:
                    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {self.analysis_count} –∞–Ω–∞–ª–∏–∑–æ–≤, "
                              f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {self.signals_sent} —Å–∏–≥–Ω–∞–ª–æ–≤")
                
                # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                logger.debug(f"üò¥ –û–∂–∏–¥–∞–Ω–∏–µ {interval_seconds} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                time.sleep(interval_seconds)
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
            self.stop()
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self.stop()
    
    def run_single_analysis(self):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        """
        logger.info("üß™ –ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        signal = self.analyze_single_iteration()
        
        if signal:
            logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: —Å–∏–≥–Ω–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: –∞–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        return signal
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if hasattr(self.rest_client, 'close'):
            self.rest_client.close()
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info(f"üìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {self.analysis_count}")
        logger.info(f"   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {self.signals_sent}")
        
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        setup_main_logger()
        
        logger.info("üéØ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π MEXC Futures")
        logger.info("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = MexcAnalysisBot()
          # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:
        bot.run_single_analysis()  # –û–¥–∏–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # bot.run_continuous_analysis(interval_seconds=60)  # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
