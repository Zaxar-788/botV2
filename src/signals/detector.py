"""
–î–µ—Ç–µ–∫—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –æ–±—ä—ë–º–∞
"""

import logging
from typing import List, Dict, Optional, NamedTuple
from statistics import mean
from src.config import VOLUME_SPIKE_THRESHOLD, VOLUME_ANALYSIS_WINDOW

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


class VolumeSignal(NamedTuple):
    """
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ —Å–ø–∞–π–∫–µ –æ–±—ä—ë–º–∞
    """
    timestamp: int          # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Å–≤–µ—á–∏
    pair: str              # –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
    current_volume: float  # –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º
    average_volume: float  # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º –∑–∞ –ø–µ—Ä–∏–æ–¥
    spike_ratio: float     # –í–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–µ–≤—ã—à–µ–Ω —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º
    price: float          # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
    message: str          # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞


class VolumeSpikeDetector:
    """
    –î–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–∞–π–∫–æ–≤ –æ–±—ä—ë–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ –∏ –≤—ã—è–≤–ª—è–µ—Ç –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è,
    –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≤–∞–∂–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.
    """
    
    def __init__(self, threshold: float = VOLUME_SPIKE_THRESHOLD, 
                 window_size: int = VOLUME_ANALYSIS_WINDOW):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        
        Args:
            threshold (float): –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–∞–π–∫–∞ (–≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –æ–±—ä—ë–º –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π)
            window_size (int): –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä—ë–º–∞
        """
        self.threshold = threshold
        self.window_size = window_size
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–∞–π–∫–æ–≤ –æ–±—ä—ë–º–∞. –ü–æ—Ä–æ–≥: {threshold}x, –æ–∫–Ω–æ: {window_size}")
    
    def analyze_volume_spike(self, klines: List[Dict], pair: str = "BTC_USDT") -> Optional[VolumeSignal]:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–ø–∞–π–∫–æ–≤ –æ–±—ä—ë–º–∞ –≤ —Å–ø–∏—Å–∫–µ —Å–≤–µ—á–µ–π
        
        Args:
            klines (List[Dict]): –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
            pair (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            VolumeSignal: –û–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞ –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–π–∫, –∏–Ω–∞—á–µ None
        """
        if not klines or len(klines) < self.window_size:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {self.window_size} —Å–≤–µ—á–µ–π")
            return None
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä—ë–º—ã –∏–∑ —Å–≤–µ—á–µ–π (–ø–æ–ª–µ 'q')
            volumes = []
            for kline in klines:
                volume = float(kline.get('q', 0))
                volumes.append(volume)
            
            # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            current_kline = klines[-1]
            current_volume = volumes[-1]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–≤–µ—á–∏ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é)
            analysis_volumes = volumes[-(self.window_size + 1):-1]  # –ë–µ—Ä—ë–º window_size —Å–≤–µ—á–µ–π –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–µ–π
            
            if len(analysis_volumes) < self.window_size:
                # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –±–µ—Ä—ë–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π)
                analysis_volumes = volumes[:-1]
            
            if not analysis_volumes:
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä—ë–º–∞")
                return None
            
            average_volume = mean(analysis_volumes)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–∞–π–∫
            if average_volume > 0:
                spike_ratio = current_volume / average_volume
                
                logger.debug(f"–ê–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–∞ –¥–ª—è {pair}: —Ç–µ–∫—É—â–∏–π={current_volume:.2f}, "
                           f"—Å—Ä–µ–¥–Ω–∏–π={average_volume:.2f}, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç={spike_ratio:.2f}")
                
                if spike_ratio >= self.threshold:
                    # –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–π–∫ –æ–±—ä—ë–º–∞!
                    signal = VolumeSignal(
                        timestamp=int(current_kline.get('t', 0)),
                        pair=pair,
                        current_volume=current_volume,
                        average_volume=average_volume,
                        spike_ratio=spike_ratio,
                        price=float(current_kline.get('c', 0)),
                        message=f"üö® –°–ü–ê–ô–ö –û–ë–™–Å–ú–ê! {pair}: –æ–±—ä—ë–º –ø—Ä–µ–≤—ã—à–µ–Ω –≤ {spike_ratio:.1f}x "
                               f"(—Ç–µ–∫—É—â–∏–π: {current_volume:.0f}, —Å—Ä–µ–¥–Ω–∏–π: {average_volume:.0f})"
                    )
                    
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–π–∫ –æ–±—ä—ë–º–∞ –¥–ª—è {pair}: {spike_ratio:.1f}x –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ")
                    return signal
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–ø–∞–π–∫–∞ –æ–±—ä—ë–º–∞: {e}")
            return None
    
    def is_volume_anomaly(self, klines: List[Dict]) -> bool:
        """
        –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –æ–±—ä—ë–º–∞
        
        Args:
            klines (List[Dict]): –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è, False –∏–Ω–∞—á–µ
        """
        signal = self.analyze_volume_spike(klines)
        return signal is not None
