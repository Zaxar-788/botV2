"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π REST API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏ MEXC Futures
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 750+ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
"""

import aiohttp
import asyncio
import logging
from typing import List, Dict, Optional, Union, Tuple
from dataclasses import dataclass
from src.config import MEXC_API_BASE_URL

logger = logging.getLogger(__name__)


@dataclass
class RequestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    success: bool
    data: Optional[Dict] = None
    error: Optional[str] = None
    pair: Optional[str] = None
    timeframe: Optional[str] = None


class AsyncMexcRestClient:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å REST API –±–∏—Ä–∂–∏ MEXC Futures
    
    –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
    - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (aiohttp)
    - –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    - Batch –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–∞—Ä
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limits
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    - –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 750+ –ø–∞—Ä
    """
    
    def __init__(self, 
                 max_connections: int = 100,
                 max_connections_per_host: int = 30,
                 request_timeout: int = 10,
                 max_retries: int = 3):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            max_connections: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
            max_connections_per_host: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Ö–æ—Å—Ç
            request_timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        """
        self.base_url = MEXC_API_BASE_URL
        self.request_timeout = request_timeout
        self.max_retries = max_retries
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.connector = aiohttp.TCPConnector(
            limit=max_connections,
            limit_per_host=max_connections_per_host,
            ttl_dns_cache=300,
            use_dns_cache=True,
        )
        
        # –¢–∞–π–º–∞—É—Ç—ã
        self.timeout = aiohttp.ClientTimeout(
            total=request_timeout,
            connect=5,
            sock_read=request_timeout
        )
        
        # –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        self._session: Optional[aiohttp.ClientSession] = None
        self._closed = False
        
        logger.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π MEXC REST –∫–ª–∏–µ–Ω—Ç (–ø—É–ª: {max_connections})")
    
    async def _ensure_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        if self._session is None or self._session.closed:
            headers = {
                'User-Agent': 'AsyncMEXC-Bot/2.0',
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
            
            self._session = aiohttp.ClientSession(
                connector=self.connector,
                timeout=self.timeout,
                headers=headers
            )
            logger.debug("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è aiohttp —Å–µ—Å—Å–∏—è")
    
    async def _make_request(self, url: str, params: Dict = None) -> RequestResult:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        Args:
            url: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            RequestResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        await self._ensure_session()
        
        for attempt in range(self.max_retries + 1):
            try:
                async with self._session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        return RequestResult(success=True, data=data)
                    elif response.status == 429:
                        # Rate limit - –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                        wait_time = min(2 ** attempt, 10)
                        logger.warning(f"Rate limit, –∂–¥–µ–º {wait_time}s (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                        await asyncio.sleep(wait_time)
                        continue
                    else:
                        error_msg = f"HTTP {response.status}: {await response.text()}"
                        if attempt == self.max_retries:
                            return RequestResult(success=False, error=error_msg)
                        logger.warning(f"HTTP –æ—à–∏–±–∫–∞ {response.status}, –ø–æ–≤—Ç–æ—Ä {attempt + 1}")
                        
            except asyncio.TimeoutError:
                error_msg = f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ {self.request_timeout}s"
                if attempt == self.max_retries:
                    return RequestResult(success=False, error=error_msg)
                logger.warning(f"–¢–∞–π–º–∞—É—Ç, –ø–æ–≤—Ç–æ—Ä {attempt + 1}")
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
                if attempt == self.max_retries:
                    return RequestResult(success=False, error=error_msg)
                logger.warning(f"–û—à–∏–±–∫–∞ {str(e)}, –ø–æ–≤—Ç–æ—Ä {attempt + 1}")
            
            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if attempt < self.max_retries:
                wait_time = min(2 ** attempt, 5)
                await asyncio.sleep(wait_time)
        
        return RequestResult(success=False, error="–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
    
    async def get_klines_async(self, 
                               pair: str, 
                               interval: str = "Min1", 
                               limit: int = 50) -> Optional[List[Dict]]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ K-line (—Å–≤–µ—á–µ–π) –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
        
        Args:
            pair: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC_USDT)
            interval: –¢–∞–π–º—Ñ—Ä–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, Min1)
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            url = f"{self.base_url}/contract/kline/{pair}"
            params = {
                'interval': interval,
                'limit': limit
            }
            
            logger.debug(f"üìä –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {pair} ({interval}, {limit} —Å–≤–µ—á–µ–π)")
            
            result = await self._make_request(url, params)
            
            if not result.success:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pair} ({interval}): {result.error}")
                return None
            
            data = result.data
            if not (data.get('success') and 'data' in data):
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {pair} ({interval})")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç —Å–≤–µ—á–µ–π
            raw_data = data['data']
            klines = []
            
            if 'time' in raw_data and len(raw_data['time']) > 0:
                count = len(raw_data['time'])
                for i in range(count):
                    kline = {
                        't': raw_data['time'][i] * 1000,  # –í –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                        'o': raw_data['open'][i],
                        'h': raw_data['high'][i],
                        'l': raw_data['low'][i],
                        'c': raw_data['close'][i],
                        'q': raw_data['vol'][i]  # volume
                    }
                    klines.append(kline)
            
            logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(klines)} —Å–≤–µ—á–µ–π –¥–ª—è {pair} ({interval})")
            return klines
            
        except Exception as e:
            logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {pair} ({interval}): {e}")
            return None
    
    async def get_multiple_klines(self, 
                                  requests: List[Tuple[str, str, int]]) -> Dict[str, RequestResult]:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–∞—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        
        Args:
            requests: –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ [(pair, interval, limit), ...]
            
        Returns:
            Dict[str, RequestResult]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ {f"{pair}_{interval}": result}
        """
        logger.info(f"üöÄ –ú–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–≤–µ—á–µ–π –¥–ª—è {len(requests)} –ø–∞—Ä/—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        tasks = []
        task_keys = []
        
        for pair, interval, limit in requests:
            task_key = f"{pair}_{interval}"
            task = self.get_klines_async(pair, interval, limit)
            tasks.append(task)
            task_keys.append(task_key)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        try:
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            response = {}
            successful = 0
            
            for i, (result, task_key) in enumerate(zip(results, task_keys)):
                if isinstance(result, Exception):
                    response[task_key] = RequestResult(
                        success=False,
                        error=str(result),
                        pair=requests[i][0],
                        timeframe=requests[i][1]
                    )
                elif result is not None:
                    response[task_key] = RequestResult(
                        success=True,
                        data=result,
                        pair=requests[i][0],
                        timeframe=requests[i][1]
                    )
                    successful += 1
                else:
                    response[task_key] = RequestResult(
                        success=False,
                        error="–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                        pair=requests[i][0],
                        timeframe=requests[i][1]
                    )
            
            logger.info(f"‚úÖ –ú–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω: {successful}/{len(requests)} —É—Å–ø–µ—à–Ω—ã—Ö")
            return response
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {}
    
    async def get_batch_klines_for_pairs(self, 
                                         pairs: List[str], 
                                         timeframes: List[str], 
                                         limit: int = 50) -> Dict[str, Dict[str, Optional[List[Dict]]]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–∞—Ä –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        
        Args:
            pairs: –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            timeframes: –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            
        Returns:
            Dict: {pair: {timeframe: klines_data}}
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        requests = []
        for pair in pairs:
            for timeframe in timeframes:
                requests.append((pair, timeframe, limit))
        
        logger.info(f"üìä Batch –∑–∞–ø—Ä–æ—Å: {len(pairs)} –ø–∞—Ä √ó {len(timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ = {len(requests)} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        raw_results = await self.get_multiple_klines(requests)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–∞—Ä–∞–º –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        organized_results = {}
        for pair in pairs:
            organized_results[pair] = {}
            for timeframe in timeframes:
                task_key = f"{pair}_{timeframe}"
                result = raw_results.get(task_key)
                
                if result and result.success:
                    organized_results[pair][timeframe] = result.data
                else:
                    organized_results[pair][timeframe] = None
                    if result and result.error:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è {pair}/{timeframe}: {result.error}")
        
        successful_count = sum(
            1 for pair_data in organized_results.values()
            for tf_data in pair_data.values()
            if tf_data is not None
        )
        
        logger.info(f"‚úÖ Batch —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {successful_count}/{len(requests)} —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        return organized_results
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        if self._session and not self._session.closed:
            await self._session.close()
            logger.debug("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
        
        if self.connector and not self.connector.closed:
            await self.connector.close()
            logger.debug("TCP –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∑–∞–∫—Ä—ã—Ç")
        
        self._closed = True
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if not self._closed and self._session and not self._session.closed:
            logger.warning("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –±—ã–ª —è–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–∑—ã–≤–∞—Ç—å close()")
    
    async def __aenter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ async context manager"""
        await self._ensure_session()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ async context manager"""
        await self.close()


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è batch –æ–ø–µ—Ä–∞—Ü–∏–π
async def fetch_all_pairs_data(pairs: List[str], 
                               timeframes: List[str], 
                               limit: int = 50) -> Dict[str, Dict[str, Optional[List[Dict]]]]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
    
    Args:
        pairs: –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        timeframes: –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        
    Returns:
        Dict: –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ä–∞–º –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
    """
    async with AsyncMexcRestClient() as client:
        return await client.get_batch_klines_for_pairs(pairs, timeframes, limit)


async def test_async_client():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ REST –∫–ª–∏–µ–Ω—Ç–∞")
    
    test_pairs = ["BTC_USDT", "ETH_USDT", "BNB_USDT"]
    test_timeframes = ["Min1", "Min5"]
    
    async with AsyncMexcRestClient() as client:
        # –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        logger.info("üîç –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
        klines = await client.get_klines_async("BTC_USDT", "Min1", 10)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(klines) if klines else 0} —Å–≤–µ—á–µ–π")
        
        # –¢–µ—Å—Ç batch –∑–∞–ø—Ä–æ—Å–∞
        logger.info("üöÄ –¢–µ—Å—Ç batch –∑–∞–ø—Ä–æ—Å–∞...")
        batch_results = await client.get_batch_klines_for_pairs(test_pairs, test_timeframes, 20)
        
        success_count = 0
        for pair, timeframe_data in batch_results.items():
            for tf, data in timeframe_data.items():
                if data:
                    success_count += 1
                    logger.info(f"‚úÖ {pair}/{tf}: {len(data)} —Å–≤–µ—á–µ–π")
                else:
                    logger.warning(f"‚ùå {pair}/{tf}: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        
        logger.info(f"üìä –ò—Ç–æ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö: {success_count}/{len(test_pairs) * len(test_timeframes)}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
    
    from src.utils.logger import setup_main_logger
    setup_main_logger()
    
    asyncio.run(test_async_client())
