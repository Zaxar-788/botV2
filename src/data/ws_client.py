"""
WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è real-time –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –ø–∞—Ä MEXC Futures

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ –≥—Ä–∞–º–æ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è:
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ wss://contract.mexc.com/ws
- –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ 750+ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –ø–∞—Ä
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –ª–∏–º–∏—Ç–∞—Ö
- Fault-tolerance –∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
- –ò–∑–æ–ª—è—Ü–∏–∏ –æ—à–∏–±–æ–∫ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AsyncMexcAnalysisBot

–ê–≤—Ç–æ—Ä: GitHub Copilot
–í–µ—Ä—Å–∏—è: 2.0 - Real-time WebSocket –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
"""

import asyncio
import json
import logging
import time
import weakref
from asyncio import Queue, Event, TaskGroup
from contextlib import AsyncExitStack
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
from typing import Dict, List, Optional, Set, Callable, Any, Tuple, Union
from urllib.parse import urljoin

import aiohttp
from aiohttp import WSMsgType, ClientWebSocketResponse, ClientSession

from src.data.pairs_fetcher import MexcPairsFetcher, get_pairs_fetcher
from src.utils.logger import setup_main_logger

logger = logging.getLogger(__name__)


class SubscriptionType(Enum):
    """–¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫ WebSocket"""
    TICKER = "ticker"           # –î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞
    KLINE_1M = "kline_Min1"     # 1-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
    KLINE_5M = "kline_Min5"     # 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
    KLINE_15M = "kline_Min15"   # 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
    KLINE_1H = "kline_Min60"    # 1-—á–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏
    DEPTH = "depth"             # –°—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫
    DEALS = "deals"             # –¢–æ—Ä–≥–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏


class ConnectionState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    DISCONNECTED = "disconnected"
    CONNECTING = "connecting"
    CONNECTED = "connected"
    RECONNECTING = "reconnecting"
    FAILED = "failed"


@dataclass
class WSMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
    channel: str
    symbol: str
    data: Dict[str, Any]
    timestamp: datetime = field(default_factory=datetime.now)
    raw_message: Dict[str, Any] = field(default_factory=dict)


@dataclass
class ConnectionMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    connection_id: str
    connected_at: Optional[datetime] = None
    last_message_at: Optional[datetime] = None
    messages_received: int = 0
    reconnect_count: int = 0
    subscriptions_count: int = 0
    error_count: int = 0
    is_healthy: bool = True


class MexcWebSocketClient:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è MEXC Futures
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 100 –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–ª–∏–º–∏—Ç MEXC)
    - –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    - –ò–∑–æ–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏
    - Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä
    """
    
    WS_BASE_URL = "wss://contract.mexc.com/ws"
    MAX_SUBSCRIPTIONS_PER_CONNECTION = 100  # –õ–∏–º–∏—Ç MEXC
    PING_INTERVAL = 30  # –ò–Ω—Ç–µ—Ä–≤–∞–ª ping –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    RECONNECT_DELAY = 5  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    MAX_RECONNECT_ATTEMPTS = 10
    MESSAGE_TIMEOUT = 60  # –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    
    def __init__(self, 
                 pairs_fetcher: Optional[MexcPairsFetcher] = None,
                 subscription_types: List[SubscriptionType] = None,
                 event_handler: Optional[Callable[[WSMessage], None]] = None,
                 error_handler: Optional[Callable[[Exception, str], None]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            pairs_fetcher: –§–µ—Ç—á–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä
            subscription_types: –¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            event_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
            error_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        """
        logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MEXC Futures WebSocket –∫–ª–∏–µ–Ω—Ç–∞...")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.pairs_fetcher = pairs_fetcher or get_pairs_fetcher()
        self.subscription_types = subscription_types or [
            SubscriptionType.TICKER,
            SubscriptionType.KLINE_1M,
            SubscriptionType.KLINE_5M
        ]
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.event_handler = event_handler
        self.error_handler = error_handler or self._default_error_handler
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.is_running = False
        self.shutdown_event = Event()
        self.message_queue: Queue[WSMessage] = Queue(maxsize=10000)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
        self.connections: Dict[str, 'WSConnection'] = {}
        self.connection_tasks: Dict[str, asyncio.Task] = {}
        self.current_pairs: Set[str] = set()
        self.pair_to_connection: Dict[str, str] = {}  # mapping: pair -> connection_id
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.metrics: Dict[str, ConnectionMetrics] = {}
        self.start_time = datetime.now()
        self.total_messages_processed = 0
        
        # –°–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–¥–∞—á–∏
        self.pairs_monitor_task: Optional[asyncio.Task] = None
        self.message_processor_task: Optional[asyncio.Task] = None
        self.health_monitor_task: Optional[asyncio.Task] = None
        
        logger.info(f"‚úÖ WebSocket –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üì° –¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫: {[t.value for t in self.subscription_types]}")

    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ WebSocket –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è WebSocket –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ WebSocket –∫–ª–∏–µ–Ω—Ç–∞...")
        self.is_running = True
        self.shutdown_event.clear()
        
        try:
            async with TaskGroup() as tg:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
                self.pairs_monitor_task = tg.create_task(
                    self._monitor_pairs_changes(),
                    name="pairs_monitor"
                )
                
                self.message_processor_task = tg.create_task(
                    self._process_messages(),
                    name="message_processor"
                )
                
                self.health_monitor_task = tg.create_task(
                    self._monitor_health(),
                    name="health_monitor"
                )
                
                # –ò–Ω–∏—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                await self._initialize_connections()
                
                logger.info("‚úÖ WebSocket –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                
                # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                await self.shutdown_event.wait()
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ WebSocket –∫–ª–∏–µ–Ω—Ç–µ: {e}")
            raise
        finally:
            await self._cleanup()

    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.is_running:
            return
            
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –∫–ª–∏–µ–Ω—Ç–∞...")
        self.is_running = False
        self.shutdown_event.set()

    async def _initialize_connections(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
            pairs = self.pairs_fetcher.get_all_pairs()
            if not pairs:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                return
                
            logger.info(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è {len(pairs)} –ø–∞—Ä...")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º
            connection_groups = self._distribute_pairs_across_connections(pairs)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            for connection_id, pair_group in connection_groups.items():
                await self._create_connection(connection_id, pair_group)
                
            self.current_pairs = set(pairs)
            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.connections)} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
            raise

    def _distribute_pairs_across_connections(self, pairs: List[str]) -> Dict[str, List[str]]:
        """
        –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤
        
        Returns:
            Dict[connection_id, pairs_list]
        """
        connections = {}
        total_subscriptions_per_pair = len(self.subscription_types)
        max_pairs_per_connection = self.MAX_SUBSCRIPTIONS_PER_CONNECTION // total_subscriptions_per_pair
        
        logger.debug(f"üìä –ú–∞–∫—Å–∏–º—É–º {max_pairs_per_connection} –ø–∞—Ä –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ "
                    f"({total_subscriptions_per_pair} –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–∞—Ä—É)")
        
        for i, pair in enumerate(pairs):
            connection_id = f"ws_conn_{i // max_pairs_per_connection}"
            
            if connection_id not in connections:
                connections[connection_id] = []
            
            connections[connection_id].append(pair)
            self.pair_to_connection[pair] = connection_id
        
        logger.info(f"üì° –ü–∞—Ä—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ {len(connections)} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º")
        return connections

    async def _create_connection(self, connection_id: str, pairs: List[str]) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            logger.info(f"üîó –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {connection_id} –¥–ª—è {len(pairs)} –ø–∞—Ä...")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connection = WSConnection(
                connection_id=connection_id,
                client=weakref.ref(self),
                pairs=pairs,
                subscription_types=self.subscription_types
            )
            
            self.connections[connection_id] = connection
            self.metrics[connection_id] = ConnectionMetrics(connection_id=connection_id)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            task = asyncio.create_task(
                connection.run(),
                name=f"connection_{connection_id}"
            )
            self.connection_tasks[connection_id] = task
            
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {connection_id} —Å–æ–∑–¥–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {connection_id}: {e}")
            raise

    async def _monitor_pairs_changes(self) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ –ø–∞—Ä"""
        logger.info("üëÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–ø–∏—Å–∫–∞ –ø–∞—Ä...")
        
        while self.is_running:
            try:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                new_pairs = set(self.pairs_fetcher.get_all_pairs())
                
                if new_pairs != self.current_pairs:
                    logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –ø–∞—Ä")
                    await self._handle_pairs_changes(new_pairs)
                    
            except Exception as e:
                await self._handle_error(e, "pairs_monitor")
                await asyncio.sleep(10)

    async def _handle_pairs_changes(self, new_pairs: Set[str]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ –ø–∞—Ä"""
        try:
            added_pairs = new_pairs - self.current_pairs
            removed_pairs = self.current_pairs - new_pairs
            
            if added_pairs:
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ {len(added_pairs)} –Ω–æ–≤—ã—Ö –ø–∞—Ä")
                await self._add_pairs(list(added_pairs))
                
            if removed_pairs:
                logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω–æ {len(removed_pairs)} –ø–∞—Ä")
                await self._remove_pairs(list(removed_pairs))
                
            self.current_pairs = new_pairs
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä: {e}")

    async def _add_pairs(self, pairs: List[str]) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∞—Ä –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º"""
        for pair in pairs:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
            target_connection_id = self._find_least_loaded_connection()
            
            if target_connection_id and target_connection_id in self.connections:
                connection = self.connections[target_connection_id]
                await connection.add_pair(pair)
                self.pair_to_connection[pair] = target_connection_id
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                new_connection_id = f"ws_conn_{len(self.connections)}"
                await self._create_connection(new_connection_id, [pair])

    async def _remove_pairs(self, pairs: List[str]) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä –∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        for pair in pairs:
            connection_id = self.pair_to_connection.get(pair)
            if connection_id and connection_id in self.connections:
                connection = self.connections[connection_id]
                await connection.remove_pair(pair)
                del self.pair_to_connection[pair]

    def _find_least_loaded_connection(self) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        min_load = float('inf')
        target_connection = None
        
        for connection_id, connection in self.connections.items():
            current_load = len(connection.pairs) * len(self.subscription_types)
            if current_load < min_load and current_load < self.MAX_SUBSCRIPTIONS_PER_CONNECTION:
                min_load = current_load
                target_connection = connection_id
                
        return target_connection

    async def _process_messages(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        logger.info("üì® –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                message = await asyncio.wait_for(
                    self.message_queue.get(), 
                    timeout=1.0
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if self.event_handler:
                    await asyncio.create_task(
                        self._safe_handle_message(message),
                        name=f"handle_message_{message.symbol}"
                    )
                
                self.total_messages_processed += 1
                
            except asyncio.TimeoutError:
                continue  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            except Exception as e:
                await self._handle_error(e, "message_processor")

    async def _safe_handle_message(self, message: WSMessage) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –æ—à–∏–±–æ–∫"""
        try:
            if asyncio.iscoroutinefunction(self.event_handler):
                await self.event_handler(message)
            else:
                self.event_handler(message)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {message.symbol}: {e}")

    async def _monitor_health(self) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        logger.info("üè• –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
        while self.is_running:
            try:
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
                for connection_id, metrics in self.metrics.items():
                    await self._check_connection_health(connection_id, metrics)
                    
            except Exception as e:
                await self._handle_error(e, "health_monitor")

    async def _check_connection_health(self, connection_id: str, metrics: ConnectionMetrics) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if metrics.last_message_at:
            silence_duration = (now - metrics.last_message_at).total_seconds()
            if silence_duration > self.MESSAGE_TIMEOUT:
                logger.warning(f"‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {connection_id} –º–æ–ª—á–∏—Ç {silence_duration:.1f}s")
                metrics.is_healthy = False
                await self._restart_connection(connection_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        task = self.connection_tasks.get(connection_id)
        if task and task.done():
            logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {connection_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            metrics.is_healthy = False
            await self._restart_connection(connection_id)

    async def _restart_connection(self, connection_id: str) -> None:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {connection_id}...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if connection_id in self.connections:
                await self.connections[connection_id].close()
                del self.connections[connection_id]
                
            if connection_id in self.connection_tasks:
                task = self.connection_tasks[connection_id]
                if not task.done():
                    task.cancel()
                del self.connection_tasks[connection_id]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            pairs_for_connection = [
                pair for pair, conn_id in self.pair_to_connection.items()
                if conn_id == connection_id
            ]
            
            if pairs_for_connection:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                await self._create_connection(connection_id, pairs_for_connection)
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {connection_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {connection_id}: {e}")

    async def _handle_error(self, error: Exception, context: str) -> None:
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {context}: {error}")
        
        if self.error_handler:
            try:
                if asyncio.iscoroutinefunction(self.error_handler):
                    await self.error_handler(error, context)
                else:
                    self.error_handler(error, context)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

    def _default_error_handler(self, error: Exception, context: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        logger.error(f"üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {context}: {error}")

    async def _cleanup(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ WebSocket –∫–ª–∏–µ–Ω—Ç–∞...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            for connection in self.connections.values():
                await connection.close()
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            for task in self.connection_tasks.values():
                if not task.done():
                    task.cancel()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.connections.clear()
            self.connection_tasks.clear()
            self.pair_to_connection.clear()
            
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        uptime = (datetime.now() - self.start_time).total_seconds()
        
        return {
            "is_running": self.is_running,
            "uptime_seconds": uptime,
            "connections_count": len(self.connections),
            "total_pairs": len(self.current_pairs),
            "total_messages_processed": self.total_messages_processed,
            "queue_size": self.message_queue.qsize(),
            "connections": {
                conn_id: {
                    "pairs_count": len(conn.pairs),
                    "state": conn.state.value,
                    "metrics": {
                        "messages_received": metrics.messages_received,
                        "reconnect_count": metrics.reconnect_count,
                        "is_healthy": metrics.is_healthy,
                        "connected_at": metrics.connected_at.isoformat() if metrics.connected_at else None
                    }
                }
                for conn_id, conn in self.connections.items()
                for metrics in [self.metrics.get(conn_id)]
                if metrics
            }
        }


class WSConnection:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
    - –ü–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä
    - –û–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    - –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    """
    
    def __init__(self, 
                 connection_id: str,
                 client: weakref.ref,
                 pairs: List[str],
                 subscription_types: List[SubscriptionType]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        Args:
            connection_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            client: –°–ª–∞–±–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç
            pairs: –°–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            subscription_types: –¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫
        """
        self.connection_id = connection_id
        self.client_ref = client
        self.pairs = list(pairs)
        self.subscription_types = subscription_types
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.state = ConnectionState.DISCONNECTED
        self.websocket: Optional[ClientWebSocketResponse] = None
        self.session: Optional[ClientSession] = None
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        self.reconnect_count = 0
        self.last_ping = datetime.now()
        self.should_run = True
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        self.active_subscriptions: Set[str] = set()
        
        logger.debug(f"üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {connection_id} –¥–ª—è {len(pairs)} –ø–∞—Ä")

    async def run(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        logger.info(f"üîó –ó–∞–ø—É—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.connection_id}...")
        
        while self.should_run:
            try:
                await self._connect_and_run()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ {self.connection_id}: {e}")
                await self._handle_reconnect()

    async def _connect_and_run(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.state = ConnectionState.CONNECTING
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            self.session = aiohttp.ClientSession()
            self.websocket = await self.session.ws_connect(
                MexcWebSocketClient.WS_BASE_URL,
                heartbeat=MexcWebSocketClient.PING_INTERVAL
            )
            
            self.state = ConnectionState.CONNECTED
            self.reconnect_count = 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            client = self.client_ref()
            if client and self.connection_id in client.metrics:
                metrics = client.metrics[self.connection_id]
                metrics.connected_at = datetime.now()
                metrics.reconnect_count = self.reconnect_count
                metrics.is_healthy = True
            
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {self.connection_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
            await self._subscribe_to_channels()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            async for msg in self.websocket:
                if msg.type == WSMsgType.TEXT:
                    await self._handle_message(msg.data)
                elif msg.type == WSMsgType.ERROR:
                    logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞ {self.connection_id}: {msg.data}")
                    break
                elif msg.type in (WSMsgType.CLOSE, WSMsgType.CLOSED):
                    logger.warning(f"üîå WebSocket {self.connection_id} –∑–∞–∫—Ä—ã—Ç")
                    break
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.connection_id}: {e}")
            raise
        finally:
            await self._cleanup_connection()

    async def _subscribe_to_channels(self) -> None:
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã"""
        if not self.websocket:
            return
            
        logger.info(f"üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è {len(self.pairs)} –ø–∞—Ä...")
        
        for pair in self.pairs:
            for sub_type in self.subscription_types:
                await self._subscribe_to_channel(pair, sub_type)
                
        logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {len(self.active_subscriptions)} –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def _subscribe_to_channel(self, pair: str, sub_type: SubscriptionType) -> None:
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MEXC
            if sub_type == SubscriptionType.TICKER:
                channel = f"spot@public.market.ticker.v3.{pair.replace('_', '')}"
            elif sub_type.value.startswith("kline_"):
                interval = sub_type.value.replace("kline_", "")
                channel = f"spot@public.market.kline.{interval}.{pair.replace('_', '')}"
            elif sub_type == SubscriptionType.DEPTH:
                channel = f"spot@public.market.depth.v3.{pair.replace('_', '')}"
            elif sub_type == SubscriptionType.DEALS:
                channel = f"spot@public.market.deals.v3.{pair.replace('_', '')}"
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {sub_type}")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–¥–ø–∏—Å–∫–∏
            subscribe_msg = {
                "method": "SUBSCRIPTION",
                "params": [channel]
            }
            
            await self.websocket.send_str(json.dumps(subscribe_msg))
            self.active_subscriptions.add(channel)
            
            logger.debug(f"üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {channel}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {pair} {sub_type.value}: {e}")

    async def _handle_message(self, raw_data: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            data = json.loads(raw_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            client = self.client_ref()
            if client and self.connection_id in client.metrics:
                metrics = client.metrics[self.connection_id]
                metrics.last_message_at = datetime.now()
                metrics.messages_received += 1
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._parse_message(data)
            if message and client:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                try:
                    client.message_queue.put_nowait(message)
                except asyncio.QueueFull:
                    logger.warning(f"‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON {self.connection_id}: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {self.connection_id}: {e}")

    def _parse_message(self, data: Dict[str, Any]) -> Optional[WSMessage]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞–Ω–∞–ª—É
            channel = data.get("c", "")
            if not channel:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –∫–∞–Ω–∞–ª–∞
            # –ü—Ä–∏–º–µ—Ä—ã –∫–∞–Ω–∞–ª–æ–≤:
            # spot@public.market.ticker.v3.BTCUSDT
            # spot@public.market.kline.Min1.BTCUSDT
            parts = channel.split(".")
            if len(parts) < 2:
                return None
                
            symbol_raw = parts[-1]
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BTCUSDT -> BTC_USDT
            if len(symbol_raw) >= 6:
                if symbol_raw.endswith("USDT"):
                    symbol = f"{symbol_raw[:-4]}_USDT"
                elif symbol_raw.endswith("USD"):
                    symbol = f"{symbol_raw[:-3]}_USD"
                else:
                    symbol = symbol_raw
            else:
                symbol = symbol_raw
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return WSMessage(
                channel=channel,
                symbol=symbol,
                data=data.get("d", {}),
                raw_message=data
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

    async def _handle_reconnect(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not self.should_run:
            return
            
        self.state = ConnectionState.RECONNECTING
        self.reconnect_count += 1
        
        if self.reconnect_count > MexcWebSocketClient.MAX_RECONNECT_ATTEMPTS:
            logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è {self.connection_id}")
            self.state = ConnectionState.FAILED
            return
        
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        delay = min(MexcWebSocketClient.RECONNECT_DELAY * (2 ** (self.reconnect_count - 1)), 60)
        logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {self.connection_id} —á–µ—Ä–µ–∑ {delay}s (–ø–æ–ø—ã—Ç–∫–∞ {self.reconnect_count})")
        
        await asyncio.sleep(delay)

    async def _cleanup_connection(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.state = ConnectionState.DISCONNECTED
        
        if self.websocket and not self.websocket.closed:
            await self.websocket.close()
            
        if self.session and not self.session.closed:
            await self.session.close()
            
        self.websocket = None
        self.session = None
        self.active_subscriptions.clear()

    async def add_pair(self, pair: str) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—ã –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é"""
        if pair in self.pairs:
            return
            
        self.pairs.append(pair)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã
        if self.websocket and self.state == ConnectionState.CONNECTED:
            for sub_type in self.subscription_types:
                await self._subscribe_to_channel(pair, sub_type)
                
        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä–∞ {pair} –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é {self.connection_id}")

    async def remove_pair(self, pair: str) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã –∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if pair not in self.pairs:
            return
            
        self.pairs.remove(pair)
        
        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –∫–∞–Ω–∞–ª–æ–≤ —É–¥–∞–ª—è–µ–º–æ–π –ø–∞—Ä—ã
        if self.websocket and self.state == ConnectionState.CONNECTED:
            for sub_type in self.subscription_types:
                await self._unsubscribe_from_channel(pair, sub_type)
                
        logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω–∞ –ø–∞—Ä–∞ {pair} –∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.connection_id}")

    async def _unsubscribe_from_channel(self, pair: str, sub_type: SubscriptionType) -> None:
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–æ–¥–ø–∏—Å–∫–µ)
            if sub_type == SubscriptionType.TICKER:
                channel = f"spot@public.market.ticker.v3.{pair.replace('_', '')}"
            elif sub_type.value.startswith("kline_"):
                interval = sub_type.value.replace("kline_", "")
                channel = f"spot@public.market.kline.{interval}.{pair.replace('_', '')}"
            elif sub_type == SubscriptionType.DEPTH:
                channel = f"spot@public.market.depth.v3.{pair.replace('_', '')}"
            elif sub_type == SubscriptionType.DEALS:
                channel = f"spot@public.market.deals.v3.{pair.replace('_', '')}"
            else:
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–ø–∏—Å–∫–∏
            unsubscribe_msg = {
                "method": "UNSUBSCRIPTION",
                "params": [channel]
            }
            
            await self.websocket.send_str(json.dumps(unsubscribe_msg))
            self.active_subscriptions.discard(channel)
            
            logger.debug(f"üì∫ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {channel}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç {pair} {sub_type.value}: {e}")

    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        logger.info(f"üîå –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.connection_id}...")
        
        self.should_run = False
        await self._cleanup_connection()


# –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

def create_websocket_client(
    pairs_fetcher: Optional[MexcPairsFetcher] = None,
    subscription_types: List[SubscriptionType] = None,
    event_handler: Optional[Callable[[WSMessage], None]] = None
) -> MexcWebSocketClient:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è WebSocket –∫–ª–∏–µ–Ω—Ç–∞
    
    Args:
        pairs_fetcher: –§–µ—Ç—á–µ—Ä –ø–∞—Ä (–µ—Å–ª–∏ None, —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        subscription_types: –¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫
        event_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
        
    Returns:
        MexcWebSocketClient: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    """
    return MexcWebSocketClient(
        pairs_fetcher=pairs_fetcher,
        subscription_types=subscription_types,
        event_handler=event_handler
    )


async def create_and_start_websocket_client(
    event_handler: Callable[[WSMessage], None],
    subscription_types: List[SubscriptionType] = None
) -> MexcWebSocketClient:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ WebSocket –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        event_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
        subscription_types: –¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫
        
    Returns:
        MexcWebSocketClient: –ó–∞–ø—É—â–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    """
    client = create_websocket_client(
        subscription_types=subscription_types,
        event_handler=event_handler
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(client.start(), name="websocket_client")
    
    # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await asyncio.sleep(1)
    
    return client
