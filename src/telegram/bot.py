"""
Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏–ø–∞—Ä–Ω–æ—Å—Ç–∏ –∏ –º—É–ª—å—Ç–∏-—Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑–∞
"""

import logging
from typing import Optional, List
from datetime import datetime
from src.signals.detector import VolumeSignal
from src.config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, TRADING_PAIRS, TIMEFRAMES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


class TelegramNotifier:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞—Ä –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.
    –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç —Å–∏–≥–Ω–∞–ª—ã –≤ –∫–æ–Ω—Å–æ–ª—å.
    TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram Bot API
    """
    
    def __init__(self, bot_token: str = TELEGRAM_BOT_TOKEN, chat_id: str = TELEGRAM_CHAT_ID):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è
        
        Args:
            bot_token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            chat_id (str): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.is_enabled = bool(bot_token and chat_id)
        
        if not self.is_enabled:
            logger.warning("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã: –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id")
        else:
            logger.info("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def send_volume_signal(self, signal: VolumeSignal) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ —Å–ø–∞–π–∫–µ –æ–±—ä—ë–º–∞
        
        Args:
            signal (VolumeSignal): –û–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            timestamp_str = datetime.fromtimestamp(signal.timestamp / 1000).strftime("%H:%M:%S")
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = f"""
üö® –û–ë–ù–ê–†–£–ñ–ï–ù –°–ü–ê–ô–ö –û–ë–™–Å–ú–ê!

üìä –ü–∞—Ä–∞: {signal.pair}
‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {signal.timeframe}
üïê –í—Ä–µ–º—è: {timestamp_str}
üí∞ –¶–µ–Ω–∞: ${signal.price:.2f}
üìà –û–±—ä—ë–º: {signal.current_volume:.0f}
üìä –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º: {signal.average_volume:.0f}
üî• –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {signal.spike_ratio:.1f}x

{signal.message}
"""
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Telegram Bot API
            # –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
            print("=" * 60)
            print("üì® TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ï:")
            print(message)
            print("=" * 60)
            
            logger.info(f"–°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {signal.pair} ({signal.timeframe}): {signal.spike_ratio:.1f}x —Å–ø–∞–π–∫ –æ–±—ä—ë–º–∞")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
    
    def send_multiple_signals(self, signals: List[VolumeSignal]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        
        Args:
            signals (List[VolumeSignal]): –°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if not signals:
            return True
        
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            message = f"""
üö® –û–ë–ù–ê–†–£–ñ–ï–ù–û {len(signals)} –°–ü–ê–ô–ö–û–í –û–ë–™–Å–ú–ê!

"""
            
            for i, signal in enumerate(signals, 1):
                timestamp_str = datetime.fromtimestamp(signal.timestamp / 1000).strftime("%H:%M:%S")
                message += f"""
{i}. üìä {signal.pair} ({signal.timeframe})
   üïê {timestamp_str} | üí∞ ${signal.price:.2f}
   üî• –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {signal.spike_ratio:.1f}x
   üìà –û–±—ä—ë–º: {signal.current_volume:.0f} (—Å—Ä–µ–¥–Ω–∏–π: {signal.average_volume:.0f})

"""
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Telegram Bot API
            print("=" * 60)
            print("üì® TELEGRAM –ú–ê–°–°–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï:")
            print(message)
            print("=" * 60)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {len(signals)} —Å–∏–≥–Ω–∞–ª–∞—Ö")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def send_custom_message(self, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Telegram Bot API
            print("=" * 60)
            print("üì® TELEGRAM –°–û–û–ë–©–ï–ù–ò–ï:")
            print(message)
            print("=" * 60)
            
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def send_startup_notification(self) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –º—É–ª—å—Ç–∏–ø–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        startup_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        pairs_str = ", ".join(TRADING_PAIRS)
        timeframes_str = ", ".join(TIMEFRAMES)
        
        message = f"""
ü§ñ –ú–£–õ–¨–¢–ò–ü–ê–†–ù–´–ô –ë–û–¢ –ê–ù–ê–õ–ò–ó–ê MEXC FUTURES –ó–ê–ü–£–©–ï–ù

‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {startup_time}
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: {pairs_str}
‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {timeframes_str}
üîç –ê–Ω–∞–ª–∏–∑: —Å–ø–∞–π–∫–∏ –æ–±—ä—ë–º–∞
üì° –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω

–ë–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏—è—Ö –æ–±—ä—ë–º–∞ —Ç–æ—Ä–≥–æ–≤ 
–Ω–∞ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä–∞—Ö –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö.
"""
        return self.send_custom_message(message)


# TODO: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram Bot API
def _send_telegram_request(bot_token: str, method: str, data: dict) -> Optional[dict]:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram Bot API (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
    
    Args:
        bot_token (str): –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        method (str): –ú–µ—Ç–æ–¥ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'sendMessage')
        data (dict): –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        
    Returns:
        dict: –û—Ç–≤–µ—Ç –æ—Ç API –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ https://api.telegram.org/bot{token}/{method}
    pass


def _format_message_for_telegram(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram (—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
    
    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # TODO: –î–æ–±–∞–≤–∏—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2 –∏–ª–∏ HTML
    return text
