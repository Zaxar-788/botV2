"""
Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏–ø–∞—Ä–Ω–æ—Å—Ç–∏ –∏ –º—É–ª—å—Ç–∏-—Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑–∞
"""

import logging
import requests
from typing import Optional, List, Union
from datetime import datetime
from src.signals.detector import VolumeSignal
from src.config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, TRADING_PAIRS, TIMEFRAMES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


class TelegramNotifier:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞—Ä –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.
    –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ inline-–∫–Ω–æ–ø–∫–∞–º–∏.
    """
    
    def __init__(self, bot_token: str = TELEGRAM_BOT_TOKEN, chat_id: str = TELEGRAM_CHAT_ID):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è
        
        Args:
            bot_token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            chat_id (str): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.is_enabled = bool(bot_token and chat_id)
        
        if not self.is_enabled:
            logger.warning("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã: –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id")
        else:
            logger.info("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def send_professional_signal(self, 
                                token: str, 
                                chat_id: Union[str, int], 
                                coin: str,
                                timeframe: str, 
                                signal_type: str,
                                price: float,
                                volume: float,
                                oi: Optional[float] = None,
                                change_percent: Optional[float] = None,
                                coin_url: Optional[str] = None,
                                comment: Optional[str] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram
        
        Args:
            token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            chat_id (Union[str, int]): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            coin (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC_USDT)
            timeframe (str): –¢–∞–π–º—Ñ—Ä–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1m)
            signal_type (str): –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ (pump/dump/long/short/alert)
            price (float): –¶–µ–Ω–∞
            volume (float): –û–±—ä—ë–º
            oi (Optional[float]): Open Interest (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            change_percent (Optional[float]): –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            coin_url (Optional[str]): –°—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–Ω–µ—Ç—É –Ω–∞ MEXC
            comment (Optional[str]): –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º emoji –∏ —Å—Ç–∏–ª—å –ø–æ —Ç–∏–ø—É —Å–∏–≥–Ω–∞–ª–∞
            signal_config = {
                'pump': {'emoji': 'üöÄ', 'color': 'üü¢', 'name': '–ü–ê–ú–ü'},
                'dump': {'emoji': 'üí•', 'color': 'üî¥', 'name': '–î–ê–ú–ü'},
                'long': {'emoji': 'üü¢', 'color': 'üü¢', 'name': '–õ–û–ù–ì'},
                'short': {'emoji': 'üî¥', 'color': 'üî¥', 'name': '–®–û–†–¢'},
                'alert': {'emoji': '‚ö°Ô∏è', 'color': 'üü°', 'name': '–ê–õ–ï–†–¢'}
            }
            
            config = signal_config.get(signal_type.lower(), signal_config['alert'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–Ω–µ—Ç—É, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
            if not coin_url:
                coin_url = f"https://futures.mexc.com/exchange/{coin}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"{config['emoji']} <b>{config['name']} –°–ò–ì–ù–ê–õ</b>\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–µ—Ç–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
            message += f"üí∞ –ú–æ–Ω–µ—Ç–∞: <a href='{coin_url}'>{coin}</a> <code>{coin}</code>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            message += f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: <b>{timeframe}</b>\n"
            message += f"üíµ –¶–µ–Ω–∞: <b>${price:,.4f}</b>\n"
            message += f"üìä –û–±—ä—ë–º: <b>{volume:,.0f}</b>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º OI –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
            if oi is not None:
                message += f"üîÑ OI: <b>{oi:,.0f}</b>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ
            if change_percent is not None:
                change_emoji = "üìà" if change_percent > 0 else "üìâ"
                sign = "+" if change_percent > 0 else ""
                message += f"{change_emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{sign}{change_percent:.2f}%</b>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            current_time = datetime.now().strftime("%H:%M:%S")
            message += f"üïê –í—Ä–µ–º—è: <b>{current_time}</b>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
            if comment:
                message += f"\nüí¨ <i>{comment}</i>\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
            reply_markup = {
                "inline_keyboard": [[
                    {
                        "text": f"üìà –û—Ç–∫—Ä—ã—Ç—å {coin} –Ω–∞ MEXC",
                        "url": coin_url
                    }
                ]]
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
            url = f"https://api.telegram.org/bot{token}/sendMessage"
            
            payload = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "HTML",
                "disable_web_page_preview": True,
                "reply_markup": reply_markup
            }
            
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()
            
            result = response.json()
            
            if result.get("ok"):
                logger.info(f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {coin} ({timeframe}) - {signal_type.upper()}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –≤ Telegram: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
    
    def send_volume_signal(self, signal: VolumeSignal) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ —Å–ø–∞–π–∫–µ –æ–±—ä—ë–º–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        
        Args:
            signal (VolumeSignal): –û–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if not self.is_enabled:
            # Fallback: –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            timestamp_str = datetime.fromtimestamp(signal.timestamp / 1000).strftime("%H:%M:%S")
            message = f"""
üö® –û–ë–ù–ê–†–£–ñ–ï–ù –°–ü–ê–ô–ö –û–ë–™–Å–ú–ê!

üìä –ü–∞—Ä–∞: {signal.pair}
‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {signal.timeframe}
üïê –í—Ä–µ–º—è: {timestamp_str}
üí∞ –¶–µ–Ω–∞: ${signal.price:.2f}
üìà –û–±—ä—ë–º: {signal.current_volume:.0f}
üìä –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º: {signal.average_volume:.0f}
üî• –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {signal.spike_ratio:.1f}x

{signal.message}
"""
            print("=" * 60)
            print("üì® TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ï:")
            print(message)
            print("=" * 60)
            
            logger.info(f"–°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {signal.pair} ({signal.timeframe}): {signal.spike_ratio:.1f}x —Å–ø–∞–π–∫ –æ–±—ä—ë–º–∞")
            return True
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∞–π–∫–∞ –æ–±—ä—ë–º–∞
            if signal.spike_ratio >= 5.0:
                signal_type = "pump" if signal.price > 0 else "alert"
            elif signal.spike_ratio >= 3.0:
                signal_type = "alert"
            else:
                signal_type = "alert"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment = f"–°–ø–∞–π–∫ –æ–±—ä—ë–º–∞ {signal.spike_ratio:.1f}x –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. {signal.message}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
            return self.send_professional_signal(
                token=self.bot_token,
                chat_id=self.chat_id,
                coin=signal.pair,
                timeframe=signal.timeframe,
                signal_type=signal_type,
                price=signal.price,
                volume=signal.current_volume,
                change_percent=None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                comment=comment
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
    
    def send_multiple_signals(self, signals: List[VolumeSignal]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        
        Args:
            signals (List[VolumeSignal]): –°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if not signals:
            return True
        
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            message = f"""
üö® –û–ë–ù–ê–†–£–ñ–ï–ù–û {len(signals)} –°–ü–ê–ô–ö–û–í –û–ë–™–Å–ú–ê!

"""
            
            for i, signal in enumerate(signals, 1):
                timestamp_str = datetime.fromtimestamp(signal.timestamp / 1000).strftime("%H:%M:%S")
                message += f"""
{i}. üìä {signal.pair} ({signal.timeframe})
   üïê {timestamp_str} | üí∞ ${signal.price:.2f}
   üî• –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {signal.spike_ratio:.1f}x
   üìà –û–±—ä—ë–º: {signal.current_volume:.0f} (—Å—Ä–µ–¥–Ω–∏–π: {signal.average_volume:.0f})

"""
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Telegram Bot API
            print("=" * 60)
            print("üì® TELEGRAM –ú–ê–°–°–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï:")
            print(message)
            print("=" * 60)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {len(signals)} —Å–∏–≥–Ω–∞–ª–∞—Ö")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def send_custom_message(self, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Telegram Bot API
            print("=" * 60)
            print("üì® TELEGRAM –°–û–û–ë–©–ï–ù–ò–ï:")
            print(message)
            print("=" * 60)
            
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def send_startup_notification(self) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –º—É–ª—å—Ç–∏–ø–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        startup_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        pairs_str = ", ".join(TRADING_PAIRS)
        timeframes_str = ", ".join(TIMEFRAMES)
        
        message = f"""
ü§ñ –ú–£–õ–¨–¢–ò–ü–ê–†–ù–´–ô –ë–û–¢ –ê–ù–ê–õ–ò–ó–ê MEXC FUTURES –ó–ê–ü–£–©–ï–ù

‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {startup_time}
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: {pairs_str}
‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {timeframes_str}
üîç –ê–Ω–∞–ª–∏–∑: —Å–ø–∞–π–∫–∏ –æ–±—ä—ë–º–∞
üì° –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω

–ë–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏—è—Ö –æ–±—ä—ë–º–∞ —Ç–æ—Ä–≥–æ–≤ 
–Ω–∞ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä–∞—Ö –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö.
"""
        return self.send_custom_message(message)
