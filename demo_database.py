"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏
"""

import time
import logging
from datetime import datetime, timedelta
from src.utils.logger import setup_main_logger
from src.main import MexcAnalysisBot
from src.data.database import SignalsManager
from src.config import TRADING_PAIRS, TIMEFRAMES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


def demo_basic_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info("üéØ === –î–ï–ú–û 1: –ë–ê–ó–û–í–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–∞—Ä –¥–ª—è –¥–µ–º–æ
        demo_pairs = ["BTC_USDT", "ETH_USDT"]
        demo_timeframes = ["Min1", "Min5"]
        
        bot = MexcAnalysisBot(pairs=demo_pairs, timeframes=demo_timeframes)
        
        logger.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
        for i in range(3):
            logger.info(f"üìä –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/3...")
            signals = bot.analyze_single_iteration()
            
            if signals:
                logger.info(f"   üéØ –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤!")
                for signal in signals:
                    logger.info(f"      üí´ {signal.pair} ({signal.timeframe}): {signal.spike_ratio:.1f}x")
            else:
                logger.info("   ‚úÖ –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
            time.sleep(2)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:")
        bot._print_detailed_statistics()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        bot.print_database_statistics()
        
        bot.stop()
        logger.info("‚úÖ –î–µ–º–æ –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ: {e}")
        raise


def demo_history_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info("üéØ === –î–ï–ú–û 2: –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ò –°–ò–ì–ù–ê–õ–û–í ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        manager = SignalsManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = manager.get_full_statistics()
        db_stats = stats['database']
        
        total_signals = db_stats.get('total_signals', 0)
        logger.info(f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ: {total_signals}")
        
        if total_signals == 0:
            logger.warning("‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –±–æ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
            manager.close()
            return
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–∞—Ä–∞–º
        by_pairs = db_stats.get('by_pairs', {})
        logger.info("üìà –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º –ø–∞—Ä–∞–º:")
        for pair, count in sorted(by_pairs.items(), key=lambda x: x[1], reverse=True):
            logger.info(f"   {pair}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        by_timeframes = db_stats.get('by_timeframes', {})
        logger.info("‚è∞ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
        for tf, count in sorted(by_timeframes.items(), key=lambda x: x[1], reverse=True):
            logger.info(f"   {tf}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        logger.info("üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤:")
        recent_signals = manager.get_signals_history(limit=5)
        
        for i, signal in enumerate(recent_signals, 1):
            timestamp = datetime.fromtimestamp(signal['timestamp'] / 1000)
            logger.info(f"   {i}. {signal['pair']} ({signal['timeframe']}) - "
                       f"{timestamp.strftime('%H:%M:%S')} - —Å–ø–∞–π–∫ {signal['spike_ratio']:.1f}x")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä–µ
        if by_pairs:
            top_pair = max(by_pairs.items(), key=lambda x: x[1])[0]
            logger.info(f"üéØ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∞–º–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Ä—ã: {top_pair}")
            
            pair_signals = manager.get_signals_history(pair=top_pair, limit=10)
            logger.info(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(pair_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {top_pair}")
            
            if pair_signals:
                # –ê–Ω–∞–ª–∏–∑ —Å–ø–∞–π–∫–æ–≤
                spike_ratios = [s['spike_ratio'] for s in pair_signals]
                avg_spike = sum(spike_ratios) / len(spike_ratios)
                max_spike = max(spike_ratios)
                
                logger.info(f"   üìà –°—Ä–µ–¥–Ω–∏–π —Å–ø–∞–π–∫: {avg_spike:.1f}x")
                logger.info(f"   üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø–∞–π–∫: {max_spike:.1f}x")
        
        manager.close()
        logger.info("‚úÖ –î–µ–º–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise


def demo_export_and_reporting():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"""
    logger.info("üéØ === –î–ï–ú–û 3: –≠–ö–°–ü–û–†–¢ –ò –û–¢–ß–ï–¢–ù–û–°–¢–¨ ===")
    
    try:
        manager = SignalsManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        stats = manager.get_full_statistics()
        total_signals = stats['database'].get('total_signals', 0)
        
        if total_signals == 0:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            manager.close()
            return
        
        logger.info(f"üìä –≠–∫—Å–ø–æ—Ä—Ç {total_signals} —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –û–±—â–∏–π —ç–∫—Å–ø–æ—Ä—Ç
        all_export = f"all_signals_{timestamp}.csv"
        success = manager.export_signals(all_export, limit=1000)
        if success:
            logger.info(f"   ‚úÖ –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {all_export}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –ø–∞—Ä–∞–º
        by_pairs = stats['database'].get('by_pairs', {})
        for pair in list(by_pairs.keys())[:2]:  # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ 2 –ø–∞—Ä—ã –¥–ª—è –¥–µ–º–æ
            pair_export = f"signals_{pair}_{timestamp}.csv"
            success = manager.export_signals(pair_export, pair=pair, limit=500)
            if success:
                count = by_pairs[pair]
                logger.info(f"   ‚úÖ {pair}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {pair_export}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        by_timeframes = stats['database'].get('by_timeframes', {})
        if "Min1" in by_timeframes:
            tf_export = f"signals_Min1_{timestamp}.csv"
            success = manager.export_signals(tf_export, timeframe="Min1", limit=500)
            if success:
                count = by_timeframes["Min1"]
                logger.info(f"   ‚úÖ Min1: {count} —Å–∏–≥–Ω–∞–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {tf_export}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        report_file = f"signals_report_{timestamp}.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("=== –û–¢–ß–ï–¢ –ü–û –°–ò–ì–ù–ê–õ–ê–ú ===\n")
            f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}\n\n")
            
            f.write("–ü–æ —Ç–æ—Ä–≥–æ–≤—ã–º –ø–∞—Ä–∞–º:\n")
            for pair, count in sorted(by_pairs.items(), key=lambda x: x[1], reverse=True):
                f.write(f"  {pair}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤\n")
            
            f.write("\n–ü–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:\n")
            for tf, count in sorted(by_timeframes.items(), key=lambda x: x[1], reverse=True):
                f.write(f"  {tf}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤\n")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–∏–≥–Ω–∞–ª–æ–≤
            f.write("\n–ü—Ä–∏–º–µ—Ä—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:\n")
            recent = manager.get_signals_history(limit=5)
            for signal in recent:
                timestamp_dt = datetime.fromtimestamp(signal['timestamp'] / 1000)
                f.write(f"  {timestamp_dt.strftime('%Y-%m-%d %H:%M:%S')} - "
                       f"{signal['pair']} ({signal['timeframe']}) - "
                       f"—Å–ø–∞–π–∫ {signal['spike_ratio']:.1f}x\n")
        
        logger.info(f"   üìÑ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")
        
        manager.close()
        logger.info("‚úÖ –î–µ–º–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        raise


def demo_cache_monitoring():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—ç—à–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    logger.info("üéØ === –î–ï–ú–û 4: –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–≠–®–ê ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à–∞
        demo_pairs = ["BTC_USDT"]
        demo_timeframes = ["Min1"]
        
        bot = MexcAnalysisBot(pairs=demo_pairs, timeframes=demo_timeframes)
        
        logger.info("üóÇÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Ç–µ—Ä–∞—Ü–∏–π —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∫—ç—à–∞
        for i in range(5):
            logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/5...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –¥–æ –∞–Ω–∞–ª–∏–∑–∞
            cache_stats_before = bot.get_database_statistics()['cache']
            buffer_before = cache_stats_before.get('buffer_size', 0)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            signals = bot.analyze_single_iteration()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            cache_stats_after = bot.get_database_statistics()['cache']
            buffer_after = cache_stats_after.get('buffer_size', 0)
            
            logger.info(f"   üìä –ö—ç—à: {buffer_before} ‚Üí {buffer_after} "
                       f"(–º–∞–∫—Å: {cache_stats_after.get('max_buffer_size', 0)})")
            
            if signals:
                logger.info(f"   üéØ –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫—ç—à")
            else:
                logger.info("   ‚úÖ –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ü–∞—É–∑–∞
            time.sleep(3)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        final_stats = bot.get_database_statistics()
        logger.info("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
        cache_stats = final_stats['cache']
        db_stats = final_stats['database']
        
        logger.info(f"   üóÇÔ∏è –ë—É—Ñ–µ—Ä: {cache_stats.get('buffer_size', 0)}/{cache_stats.get('max_buffer_size', 0)}")
        logger.info(f"   üíæ –í –ë–î: {db_stats.get('total_signals', 0)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        logger.info(f"   ‚öôÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±—Ä–æ—Å–∞: {cache_stats.get('flush_interval', 0)} —Å–µ–∫")
        
        bot.stop()
        logger.info("‚úÖ –î–µ–º–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ –∫—ç—à–∞: {e}")
        raise


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        setup_main_logger()
        
        logger.info("üöÄ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ë–î –ò –ö–≠–®–ê ===")
        logger.info("üí° –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –í—ã–±–∏—Ä–∞–µ–º –¥–µ–º–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        demos = [
            ("–ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", demo_basic_usage),
            ("–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤", demo_history_analysis),
            ("–≠–∫—Å–ø–æ—Ä—Ç –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", demo_export_and_reporting),
            ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—ç—à–∞", demo_cache_monitoring)
        ]
        
        for name, demo_func in demos:
            logger.info(f"\n{'='*50}")
            logger.info(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –¥–µ–º–æ: {name}")
            logger.info(f"{'='*50}")
            
            try:
                demo_func()
                logger.info(f"‚úÖ –î–µ–º–æ '{name}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ '{name}': {e}")
                continue
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–º–æ
            logger.info("‚è∏Ô∏è –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
            time.sleep(3)
        
        logger.info("\nüéâ === –í–°–ï –î–ï–ú–û –ó–ê–í–ï–†–®–ï–ù–´ ===")
        logger.info("üí° –°–∏—Å—Ç–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
