#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –º–æ–¥—É–ª—è pairs_fetcher.py
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º API MEXC
"""

import sys
import os
import time
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.data.pairs_fetcher import MexcPairsFetcher, get_all_futures_pairs, get_pairs_fetcher
from src.utils.logger import setup_logger


def test_basic_functionality():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üîß –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä
    pairs = get_all_futures_pairs(force_update=True)
    assert len(pairs) > 500, f"–û–∂–∏–¥–∞–ª–æ—Å—å > 500 –ø–∞—Ä, –ø–æ–ª—É—á–µ–Ω–æ: {len(pairs)}"
    print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
    
    # –¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ñ–µ—Ç—á–µ—Ä–∞
    fetcher = get_pairs_fetcher()
    assert fetcher is not None, "–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–µ—Ç—á–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω"
    print("  ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–µ—Ç—á–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    return True


def test_filtering_capabilities():
    """–¢–µ—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä")
    
    fetcher = MexcPairsFetcher()
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç–µ
    usdt_pairs = fetcher.get_pairs_by_quote_coin('USDT')
    usd_pairs = fetcher.get_pairs_by_quote_coin('USD')
    btc_pairs = fetcher.get_pairs_by_quote_coin('BTC')
    
    assert len(usdt_pairs) > 500, f"USDT –ø–∞—Ä –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 500, –ø–æ–ª—É—á–µ–Ω–æ: {len(usdt_pairs)}"
    assert len(usd_pairs) > 0, f"USD –ø–∞—Ä –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0, –ø–æ–ª—É—á–µ–Ω–æ: {len(usd_pairs)}"
    
    print(f"  ‚úÖ USDT –ø–∞—Ä—ã: {len(usdt_pairs)}")
    print(f"  ‚úÖ USD –ø–∞—Ä—ã: {len(usd_pairs)}")
    print(f"  ‚úÖ BTC –ø–∞—Ä—ã: {len(btc_pairs)}")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
    btc_base_pairs = fetcher.get_pairs_by_base_coin('BTC')
    eth_base_pairs = fetcher.get_pairs_by_base_coin('ETH')
    
    print(f"  ‚úÖ BTC –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä—ã: {len(btc_base_pairs)}")
    print(f"  ‚úÖ ETH –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä—ã: {len(eth_base_pairs)}")
    
    return True


def test_detailed_info():
    """–¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–∞—Ö"""
    print("üìã –¢–µ—Å—Ç 3: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    fetcher = MexcPairsFetcher()
    usdt_pairs = fetcher.get_pairs_by_quote_coin('USDT')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä–∞—Ö
    test_pairs = usdt_pairs[:5]
    valid_info_count = 0
    
    for pair in test_pairs:
        info = fetcher.get_pair_info(pair)
        if info:
            valid_info_count += 1
            assert info.symbol == pair, f"–°–∏–º–≤–æ–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: {info.symbol} != {pair}"
            assert info.base_coin is not None, f"–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {pair}"
            assert info.quote_coin is not None, f"–ö–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {pair}"
            assert info.max_leverage > 0, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è {pair}: {info.max_leverage}"
    
    assert valid_info_count >= 3, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª–∏–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {valid_info_count}/5"
    print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è {valid_info_count}/{len(test_pairs)} –ø–∞—Ä")
    
    return True


def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("‚ö° –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    
    fetcher = MexcPairsFetcher()
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    start_time = time.time()
    pairs_1 = fetcher.get_all_pairs(force_update=True)
    time_1 = time.time() - start_time
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑ –∫—ç—à–∞
    start_time = time.time()
    pairs_2 = fetcher.get_all_pairs(force_update=False)
    time_2 = time.time() - start_time
    
    assert len(pairs_1) == len(pairs_2), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –∏–∑ –∫—ç—à–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
    assert time_2 < time_1, "–ö—ç—à –Ω–µ —É—Å–∫–æ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
    
    speedup = time_1 / time_2 if time_2 > 0 else float('inf')
    
    print(f"  ‚úÖ –í—Ä–µ–º—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º: {time_1:.3f}s")
    print(f"  ‚úÖ –í—Ä–µ–º—è –∏–∑ –∫—ç—à–∞: {time_2:.3f}s")
    print(f"  ‚úÖ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∫—ç—à–∞: {speedup:.1f}x")
    
    assert speedup > 100, f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ: {speedup:.1f}x"
    
    return True


def test_auto_update():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("üîÑ –¢–µ—Å—Ç 5: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    
    fetcher = MexcPairsFetcher(update_interval=2)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    fetcher.start_auto_update()
    
    cache_info = fetcher.get_cache_info()
    assert cache_info['auto_update_running'] == True, "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å"
    
    print("  ‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    
    # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ
    time.sleep(3)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    fetcher.stop_auto_update()
    
    cache_info = fetcher.get_cache_info()
    assert cache_info['auto_update_running'] == False, "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å"
    
    print("  ‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    return True


def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("üõ°Ô∏è –¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    
    fetcher = MexcPairsFetcher()
    
    # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä–æ–π
    info = fetcher.get_pair_info("NONEXISTENT_PAIR")
    assert info is None, "–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã"
    
    # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∞–ª—é—Ç–æ–π
    empty_pairs = fetcher.get_pairs_by_quote_coin("NONEXISTENT")
    assert len(empty_pairs) == 0, "–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∞–ª—é—Ç—ã"
    
    print("  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    return True


def test_scalability():
    """–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é"""
    print("üìà –¢–µ—Å—Ç 7: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é")
    
    fetcher = MexcPairsFetcher()
    all_pairs = fetcher.get_all_pairs()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ
    assert len(all_pairs) >= 750, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {len(all_pairs)}"
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä
    start_time = time.time()
    processed = 0
    
    for pair in all_pairs[:100]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 100 –ø–∞—Ä–∞—Ö
        info = fetcher.get_pair_info(pair)
        if info:
            processed += 1
    
    processing_time = time.time() - start_time
    pairs_per_second = processed / processing_time if processing_time > 0 else 0
    
    print(f"  ‚úÖ –í—Å–µ–≥–æ –ø–∞—Ä: {len(all_pairs)}")
    print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞—Ä: {processed}/100")
    print(f"  ‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {pairs_per_second:.1f} –ø–∞—Ä/—Å–µ–∫")
    
    # –û—Ü–µ–Ω–∫–∞ –¥–ª—è 750 –ø–∞—Ä
    estimated_time = 750 / pairs_per_second if pairs_per_second > 0 else float('inf')
    print(f"  ‚úÖ –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è 750 –ø–∞—Ä: {estimated_time:.1f}s")
    
    assert pairs_per_second > 10, f"–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è: {pairs_per_second:.1f}"
    assert estimated_time < 60, f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 750 –ø–∞—Ä —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {estimated_time:.1f}s"
    
    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 70)
    print("üß™ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ MEXC PAIRS FETCHER")
    print("=" * 70)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logger(__name__, "WARNING")  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    
    start_time = time.time()
    tests = [
        test_basic_functionality,
        test_filtering_capabilities,
        test_detailed_info,
        test_performance,
        test_auto_update,
        test_error_handling,
        test_scalability
    ]
    
    passed = 0
    failed = 0
    
    for test_func in tests:
        try:
            print(f"\n{test_func.__doc__ or test_func.__name__}")
            print("-" * 50)
            
            result = test_func()
            if result:
                passed += 1
                print("  üéâ PASSED")
            else:
                failed += 1
                print("  ‚ùå FAILED")
                
        except Exception as e:
            failed += 1
            print(f"  ‚ùå FAILED: {e}")
            import traceback
            traceback.print_exc()
    
    total_time = time.time() - start_time
    
    print("\n" + "=" * 70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {failed}")
    print(f"üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {passed + failed}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.1f}s")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("‚ú® –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 750+ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä MEXC Futures")
        return True
    else:
        print(f"\n‚ùå {failed} —Ç–µ—Å—Ç(–æ–≤) –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False


if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚õî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
