"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
–ü—Ä–æ–≤–µ—Ä–∫–∞ write-back caching –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ SQLite
"""

import time
import logging
from datetime import datetime, timezone
from src.utils.logger import setup_main_logger
from src.data.database import SignalsManager, StoredSignal
from src.signals.detector import VolumeSignal
from src.config import DATABASE_CONFIG, CACHE_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


def create_test_signal(pair: str, timeframe: str, spike_ratio: float) -> VolumeSignal:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    Args:
        pair (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        timeframe (str): –¢–∞–π–º—Ñ—Ä–µ–π–º
        spike_ratio (float): –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ø–∞–π–∫–∞
        
    Returns:
        VolumeSignal: –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
    """
    timestamp = int(time.time() * 1000)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    current_volume = 1000.0 * spike_ratio
    average_volume = 1000.0
    price = 50000.0  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ BTC
    
    message = f"üß™ –¢–ï–°–¢–û–í–´–ô –°–ò–ì–ù–ê–õ! {pair} ({timeframe}): –æ–±—ä—ë–º –ø—Ä–µ–≤—ã—à–µ–Ω –≤ {spike_ratio:.1f}x"
    
    return VolumeSignal(
        timestamp=timestamp,
        pair=pair,
        timeframe=timeframe,
        current_volume=current_volume,
        average_volume=average_volume,
        spike_ratio=spike_ratio,
        price=price,
        message=message
    )


def test_database_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∫—ç—à–∞"""
    logger.info("üß™ === –¢–ï–°–¢ 1: –ë–ê–ó–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò –° –ë–î ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –∫—ç—à–µ–º
        test_cache_config = CACHE_CONFIG.copy()
        test_cache_config['enable_cache'] = False
        
        manager = SignalsManager(DATABASE_CONFIG, test_cache_config)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        signals = [
            create_test_signal("BTC_USDT", "Min1", 2.5),
            create_test_signal("ETH_USDT", "Min5", 3.2),
            create_test_signal("BNB_USDT", "Min15", 2.8)
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã (–¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î)
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        for i, signal in enumerate(signals):
            manager.save_signal(signal)
            logger.info(f"   ‚úÖ –°–∏–≥–Ω–∞–ª {i+1}/3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {signal.pair} ({signal.timeframe})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = manager.get_full_statistics()
        db_stats = stats['database']
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î: {db_stats['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤")
        logger.info(f"üìà –ü–æ –ø–∞—Ä–∞–º: {db_stats['by_pairs']}")
        logger.info(f"‚è∞ –ü–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º: {db_stats['by_timeframes']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = manager.get_signals_history(limit=10)
        logger.info(f"üìú –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        for signal in history[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
            logger.info(f"   üîç {signal['pair']} ({signal['timeframe']}): "
                       f"—Å–ø–∞–π–∫ {signal['spike_ratio']:.1f}x")
        
        manager.close()
        logger.info("‚úÖ –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ë–î: {e}")
        raise


def test_cache_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üß™ === –¢–ï–°–¢ 2: –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –º–∞–ª–µ–Ω—å–∫–∏–º –±—É—Ñ–µ—Ä–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_cache_config = {
            'enable_cache': True,
            'buffer_size': 3,  # –ú–∞–ª–µ–Ω—å–∫–∏–π –±—É—Ñ–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'flush_interval': 5,  # 5 —Å–µ–∫—É–Ω–¥
            'batch_size': 2
        }
        
        manager = SignalsManager(DATABASE_CONFIG, test_cache_config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞
        cache_stats = manager.get_full_statistics()['cache']
        logger.info(f"üóÇÔ∏è –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞: {cache_stats['buffer_size']}/{cache_stats['max_buffer_size']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ –∫—ç—à
        logger.info("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –∫—ç—à...")
        test_signals = [
            create_test_signal("ADA_USDT", "Min1", 2.1),
            create_test_signal("SOL_USDT", "Min5", 2.4),
            create_test_signal("DOT_USDT", "Min15", 2.7),
            create_test_signal("LINK_USDT", "Min60", 3.1),  # –≠—Ç–æ—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å
        ]
        
        for i, signal in enumerate(test_signals):
            manager.save_signal(signal)
            cache_size = manager.cache.get_buffer_size()
            logger.info(f"   üìù –°–∏–≥–Ω–∞–ª {i+1}: {signal.pair}, –±—É—Ñ–µ—Ä: {cache_size}")
            
            if cache_size == 0 and i < len(test_signals) - 1:
                logger.info("   üîÑ –ë—É—Ñ–µ—Ä —Å–±—Ä–æ—à–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        final_stats = manager.get_full_statistics()
        cache_stats = final_stats['cache']
        db_stats = final_stats['database']
        
        logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   üóÇÔ∏è –ö—ç—à: {cache_stats['buffer_size']}/{cache_stats['max_buffer_size']}")
        logger.info(f"   üíæ –ë–î: {db_stats['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∫—ç—à–∞...")
        manager.cache.flush_buffer()
        
        final_cache_size = manager.cache.get_buffer_size()
        logger.info(f"   üóÇÔ∏è –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {final_cache_size}")
        
        manager.close()
        logger.info("‚úÖ –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise


def test_export_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    logger.info("üß™ === –¢–ï–°–¢ 3: –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• ===")
    
    try:
        manager = SignalsManager(DATABASE_CONFIG, CACHE_CONFIG)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
        export_file = "test_signals_export.csv"
        success = manager.export_signals(export_file, limit=100)
        
        if success:
            logger.info(f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {export_file}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            import os
            if os.path.exists(export_file):
                size = os.path.getsize(export_file)
                logger.info(f"   üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size} –±–∞–π—Ç")
                
                # –ß–∏—Ç–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                with open(export_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                    logger.info(f"   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏):")
                    for i, line in enumerate(lines):
                        logger.info(f"      {i+1}: {line.strip()[:100]}...")
            else:
                logger.warning("‚ö†Ô∏è –§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
        
        manager.close()
        logger.info("‚úÖ –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        raise


def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üß™ === –¢–ï–°–¢ 4: –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ===")
    
    try:
        # –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–≥–Ω–∞–ª–æ–≤
        test_cache_config = {
            'enable_cache': True,
            'buffer_size': 50,
            'flush_interval': 10,
            'batch_size': 20
        }
        
        manager = SignalsManager(DATABASE_CONFIG, test_cache_config)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        pairs = ["BTC_USDT", "ETH_USDT", "BNB_USDT", "ADA_USDT", "SOL_USDT"]
        timeframes = ["Min1", "Min5", "Min15", "Min60"]
        
        logger.info("‚ö° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        start_time = time.time()
        
        signal_count = 0
        for pair in pairs:
            for timeframe in timeframes:
                for i in range(10):  # 10 —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
                    spike_ratio = 2.0 + (i * 0.2)  # –û—Ç 2.0 –¥–æ 3.8
                    signal = create_test_signal(pair, timeframe, spike_ratio)
                    manager.save_signal(signal)
                    signal_count += 1
        
        generation_time = time.time() - start_time
        logger.info(f"   üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {signal_count} —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ {generation_time:.2f} —Å–µ–∫")
        logger.info(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {signal_count/generation_time:.1f} —Å–∏–≥–Ω–∞–ª–æ–≤/—Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞
        cache_stats = manager.get_full_statistics()['cache']
        logger.info(f"   üóÇÔ∏è –ö—ç—à: {cache_stats['buffer_size']}/{cache_stats['max_buffer_size']}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
        logger.info("üîÑ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∫—ç—à–∞...")
        flush_start = time.time()
        manager.cache.flush_buffer()
        flush_time = time.time() - flush_start
        
        final_stats = manager.get_full_statistics()['database']
        logger.info(f"   üíæ –°–±—Ä–æ—Å –∑–∞ {flush_time:.2f} —Å–µ–∫")
        logger.info(f"   üìä –ò—Ç–æ–≥–æ –≤ –ë–î: {final_stats['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        manager.close()
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        raise


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        setup_main_logger()
        
        logger.info("üöÄ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ë–î –ò –ö–≠–®–ê ===")
        logger.info(f"üóÇÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î: {DATABASE_CONFIG}")
        logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∞: {CACHE_CONFIG}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        test_database_basic()
        print()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –∫–æ–Ω—Å–æ–ª–∏
        
        test_cache_system()
        print()
        
        test_export_functionality()
        print()
        
        test_performance()
        print()
        
        logger.info("üéâ === –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û ===")
        logger.info("üí° –°–∏—Å—Ç–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
