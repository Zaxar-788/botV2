#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WebSocket —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é WebSocket –∫–ª–∏–µ–Ω—Ç–∞
2. –û–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –±–æ—Ç–æ–º
4. Dual-mode —Ä–∞–±–æ—Ç—É (REST + WebSocket)
"""

import asyncio
import logging
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.utils.logger import setup_main_logger
from src.data.ws_client import create_websocket_client, WSMessage, SubscriptionType
from src.data.pairs_fetcher import get_pairs_fetcher
from src.config import WEBSOCKET_CONFIG

logger = logging.getLogger(__name__)


class TestWebSocketIntegration:
    """–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.message_count = 0
        self.last_message_time = None
        self.processed_pairs = set()
        
    async def test_message_handler(self, message: WSMessage):
        """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            self.message_count += 1
            self.last_message_time = datetime.now()
            self.processed_pairs.add(message.symbol)
            
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{self.message_count}: {message.channel} –¥–ª—è {message.symbol}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            if message.channel.startswith('kline_'):
                data = message.data
                logger.info(f"   üìä Kline –¥–∞–Ω–Ω—ã–µ: —Ü–µ–Ω–∞ {data.get('c', 'N/A')}, –æ–±—ä—ë–º {data.get('v', 'N/A')}")
            elif message.channel == 'ticker':
                data = message.data
                logger.info(f"   üìà Ticker –¥–∞–Ω–Ω—ã–µ: —Ü–µ–Ω–∞ {data.get('c', 'N/A')}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ {data.get('P', 'N/A')}%")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")

    async def test_websocket_basic_connection(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket"""
        logger.info("üß™ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ—Ç—á–µ—Ä –ø–∞—Ä
            pairs_fetcher = get_pairs_fetcher(3600)
              # –°–æ–∑–¥–∞–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç
            ws_client = create_websocket_client(
                pairs_fetcher=pairs_fetcher,
                event_handler=self.test_message_handler,
                subscription_types=[SubscriptionType.TICKER, SubscriptionType.KLINE_1M]
            )
            
            logger.info("‚úÖ WebSocket –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            start_time = datetime.now()
            timeout = 30  # 30 —Å–µ–∫—É–Ω–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            task = asyncio.create_task(ws_client.start())
            
            # –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            while (datetime.now() - start_time).seconds < timeout:
                await asyncio.sleep(1)
                
                if self.message_count > 0:
                    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π, {len(self.processed_pairs)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä")
                
                if self.message_count >= 10:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
                    break
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await ws_client.stop()
            task.cancel()
            
            try:
                await task
            except asyncio.CancelledError:
                pass
            
            logger.info(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª—É—á–µ–Ω–æ {self.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {len(self.processed_pairs)} –ø–∞—Ä")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    async def test_dual_mode_simulation(self):
        """–¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ dual-mode —Ä–∞–±–æ—Ç—ã"""
        logger.info("üß™ –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è dual-mode (REST + WebSocket)")
        
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É REST API –∞–Ω–∞–ª–∏–∑–∞
            logger.info("üì° –°–∏–º—É–ª—è—Ü–∏—è REST API –∞–Ω–∞–ª–∏–∑–∞...")
            await asyncio.sleep(2)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º WebSocket real-time –æ–±—Ä–∞–±–æ—Ç–∫—É
            logger.info("üåê –°–∏–º—É–ª—è—Ü–∏—è WebSocket real-time –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            test_messages = [
                WSMessage(
                    channel="kline_Min1",
                    symbol="BTC_USDT",
                    data={"c": "50000", "v": "1000", "t": "123456789"},
                    timestamp=datetime.now()
                ),
                WSMessage(
                    channel="ticker",
                    symbol="ETH_USDT", 
                    data={"c": "3000", "P": "2.5", "v": "5000"},
                    timestamp=datetime.now()
                )
            ]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for msg in test_messages:
                await self.test_message_handler(msg)
                await asyncio.sleep(0.5)
            
            logger.info("‚úÖ Dual-mode —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ dual-mode —Ç–µ—Å—Ç–µ: {e}")
            return False

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        
        results = []
        
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        result1 = await self.test_websocket_basic_connection()
        results.append(("–ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", result1))
        
        await asyncio.sleep(2)
        
        # –¢–µ—Å—Ç 2: Dual-mode —Å–∏–º—É–ª—è—Ü–∏—è
        result2 = await self.test_dual_mode_simulation()
        results.append(("Dual-mode —Å–∏–º—É–ª—è—Ü–∏—è", result2))
        
        # –ò—Ç–æ–≥–∏
        logger.info("üìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í ===")
        passed = 0
        for test_name, result in results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            logger.info(f"   {test_name}: {status}")
            if result:
                passed += 1
        
        logger.info(f"üìà –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(results)}")
        
        if passed == len(results):
            logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    setup_main_logger()
    
    logger.info("üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WEBSOCKET –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ===")
    logger.info("üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º")
    
    try:
        tester = TestWebSocketIntegration()
        success = await tester.run_all_tests()
        
        if success:
            logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã. WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            return 0
        else:
            logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
            return 1
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        return 1


if __name__ == "__main__":
    exit(asyncio.run(main()))
