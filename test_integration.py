#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è pairs_fetcher
"""

import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.data.pairs_fetcher import MexcPairsFetcher, get_all_futures_pairs

def test_basic_functionality():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    print("üß™ –ë–ê–ó–û–í–´–ô –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ñ–µ—Ç—á–µ—Ä–∞
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MexcPairsFetcher...")
    fetcher = MexcPairsFetcher(update_interval=60)
    print("   ‚úÖ –§–µ—Ç—á–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä
    print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
    start_time = time.time()
    pairs = fetcher.get_all_pairs(force_update=True)
    elapsed = time.time() - start_time
    
    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–∞—Ä: {len(pairs)}")
    print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f}s")
    
    if len(pairs) > 0:
        print(f"   üìù –ü—Ä–∏–º–µ—Ä—ã –ø–∞—Ä: {pairs[:5]}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–µ
        print("\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ...")
        first_pair = pairs[0]
        pair_info = fetcher.get_pair_info(first_pair)
        
        if pair_info:
            print(f"   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {first_pair}:")
            print(f"      –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {pair_info.base_coin}")
            print(f"      –ö–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞: {pair_info.quote_coin}")
            print(f"      –ú–∞–∫—Å. –ø–ª–µ—á–æ: {pair_info.max_leverage}")
            print(f"      –ú–∏–Ω. –ø–ª–µ—á–æ: {pair_info.min_leverage}")
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {first_pair}")
        
        # –¢–µ—Å—Ç 4: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...")
        
        usdt_pairs = fetcher.get_pairs_by_quote_coin('USDT')
        print(f"   ‚Ä¢ USDT –ø–∞—Ä—ã: {len(usdt_pairs)}")
        if len(usdt_pairs) > 0:
            print(f"     –ü—Ä–∏–º–µ—Ä—ã: {usdt_pairs[:3]}")
        
        usd_pairs = fetcher.get_pairs_by_quote_coin('USD')
        print(f"   ‚Ä¢ USD –ø–∞—Ä—ã: {len(usd_pairs)}")
        if len(usd_pairs) > 0:
            print(f"     –ü—Ä–∏–º–µ—Ä—ã: {usd_pairs[:3]}")
        
        btc_base_pairs = fetcher.get_pairs_by_base_coin('BTC')
        print(f"   ‚Ä¢ BTC –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä—ã: {len(btc_base_pairs)}")
        if len(btc_base_pairs) > 0:
            print(f"     –ü—Ä–∏–º–µ—Ä—ã: {btc_base_pairs[:3]}")
        
        # –¢–µ—Å—Ç 5: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
        start_time = time.time()
        cached_pairs = fetcher.get_all_pairs(force_update=False)
        cached_elapsed = time.time() - start_time
        
        print(f"   ‚úÖ –ò–∑ –∫—ç—à–∞ –ø–æ–ª—É—á–µ–Ω–æ: {len(cached_pairs)} –ø–∞—Ä")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –∏–∑ –∫—ç—à–∞: {cached_elapsed:.4f}s")
        print(f"   üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {elapsed/cached_elapsed:.1f}x")
        
        # –¢–µ—Å—Ç 6: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
        print("\n6. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ...")
        cache_info = fetcher.get_cache_info()
        print(f"   ‚Ä¢ –ü–∞—Ä –≤ –∫—ç—à–µ: {cache_info['pairs_count']}")
        print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {cache_info['last_update']}")
        print(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {cache_info['update_interval']}s")
        print(f"   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {cache_info['stats']['successful_updates']} —É—Å–ø–µ—à–Ω—ã—Ö")
        
        # –¢–µ—Å—Ç 7: –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        print("\n7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏...")
        global_pairs = get_all_futures_pairs()
        print(f"   ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞: {len(global_pairs)} –ø–∞—Ä")
        
        # –¢–µ—Å—Ç 8: –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫—Ä–∞—Ç–∫–∏–π —Ç–µ—Å—Ç)
        print("\n8. –ö—Ä–∞—Ç–∫–∏–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        fetcher.start_auto_update()
        print("   ‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        
        time.sleep(2)  # –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã
        
        cache_info_after = fetcher.get_cache_info()
        auto_running = cache_info_after['auto_update_running']
        print(f"   ‚Ä¢ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: {auto_running}")
        
        fetcher.stop_auto_update()
        print("   ‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        print("\n" + "=" * 50)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ú–æ–¥—É–ª—å pairs_fetcher –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print(f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
        print(f"‚úÖ –í–∫–ª—é—á–∞—è {len(usdt_pairs)} USDT –ø–∞—Ä")
        print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
        print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        
    else:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
        return False
    
    return True

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    print("\nüõ°Ô∏è  –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    print("=" * 40)
    
    fetcher = MexcPairsFetcher()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
    print("1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã...")
    info = fetcher.get_pair_info("NONEXISTENT_PAIR")
    if info is None:
        print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–∞—Ä–∞")
    else:
        print("   ‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä–µ")
    
    # –¢–µ—Å—Ç –ø—É—Å—Ç—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    print("\n2. –¢–µ—Å—Ç –ø—É—Å—Ç—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
    empty_pairs = fetcher.get_pairs_by_quote_coin("NONEXISTENT")
    if len(empty_pairs) == 0:
        print("   ‚úÖ –§–∏–ª—å—Ç—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
    else:
        print("   ‚ùå –û—à–∏–±–∫–∞: —Ñ–∏–ª—å—Ç—Ä –≤–æ–∑–≤—Ä–∞—Ç–∏–ª –Ω–µ–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
    
    print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PAIRS_FETCHER")
    print("=" * 60)
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        success = test_basic_functionality()
        
        if success:
            # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            test_error_handling()
            
            print("\n" + "=" * 60)
            print("üéä –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("üéØ –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç")
            print("=" * 60)
        else:
            print("\n‚ùå –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
