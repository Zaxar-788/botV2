#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API MEXC –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import json

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.data.pairs_fetcher import MexcPairsFetcher

def debug_api_response():
    """–û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API"""
    
    print("üîç –û–¢–õ–ê–î–ö–ê –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê API MEXC")
    print("=" * 50)
    
    fetcher = MexcPairsFetcher()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API
    print("–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç API...")
    api_data = fetcher._fetch_symbols_from_api()
    
    if not api_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API")
        return
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç API")
    print(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(api_data)}")
    print(f"–ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(api_data.keys()) if isinstance(api_data, dict) else 'Not a dict'}")
    
    if 'data' in api_data:
        data = api_data['data']
        print(f"\n–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ 'data': {type(data)}")
        
        if isinstance(data, list) and len(data) > 0:
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(data)}")
            print(f"\n–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:")
            first_item = data[0]
            print(json.dumps(first_item, indent=2, ensure_ascii=False))
            
            print(f"\n–ö–ª—é—á–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ: {list(first_item.keys()) if isinstance(first_item, dict) else 'Not a dict'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            print(f"\n–ü—Ä–∏–º–µ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤ –∏ –≤–∞–ª—é—Ç:")
            for i, item in enumerate(data[:10]):
                if isinstance(item, dict):
                    symbol = item.get('symbol', 'N/A')
                    base = item.get('baseCoin', 'N/A')
                    quote = item.get('quoteCoin', 'N/A')
                    print(f"  {i+1}. {symbol}: {base}/{quote}")
    
    print("\n" + "=" * 50)

if __name__ == "__main__":
    debug_api_response()
