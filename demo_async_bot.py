#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π MEXC Futures

–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
üöÄ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∏–∑ pairs_fetcher (750+ –ø–∞—Ä)
‚ö° –ü–æ–ª–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å —Å asyncio/TaskGroup
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä
‚öôÔ∏è Graceful worker management –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö/—É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä
üõ°Ô∏è –ò–∑–æ–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ - —Å–±–æ–π –æ–¥–Ω–æ–π –ø–∞—Ä—ã –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
üö´ –ù–∏–∫–∞–∫–∏—Ö –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä
2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
3. Graceful shutdown –ø—Ä–∏ Ctrl+C
4. –û–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ –ø–∞—Ä
"""

import asyncio
import signal
import sys
import os
from datetime import datetime
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.main import AsyncMexcAnalysisBot
from src.utils.logger import setup_main_logger
from src.config import TIMEFRAMES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_main_logger()


class AsyncBotDemo:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    """
    
    def __init__(self):
        self.bot = None
        self.stats_task = None
        self.demo_start_time = None
        
    async def run_demo(self):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        """
        self.demo_start_time = datetime.now()
        
        logger.info("üéØ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–°–ò–ù–•–†–û–ù–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ ===")
        logger.info("üöÄ MEXC Futures Anomaly Analysis Bot - Async Version 2.0")
        logger.info("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è graceful shutdown")
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥")
        logger.info("")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –¥–µ–º–æ
            self.bot = AsyncMexcAnalysisBot(
                timeframes=["Min1", "Min5"],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ
                analysis_interval=30,        # –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥–µ–º–æ
                pairs_update_interval=120    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –¥–µ–º–æ
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats_task = asyncio.create_task(self.monitor_statistics())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
            logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º—É–ª—å—Ç–∏–ø–∞—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            await self.bot.run_async()
            
        except KeyboardInterrupt:
            logger.info("\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
            await self.graceful_shutdown()
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ: {e}")
            raise
    
    async def monitor_statistics(self):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        """
        iteration = 0
        
        while True:
            try:
                await asyncio.sleep(30)  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                iteration += 1
                
                if self.bot:
                    self.print_demo_statistics(iteration)
                
            except asyncio.CancelledError:
                logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def print_demo_statistics(self, iteration: int):
        """
        –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        """
        if not self.bot:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status = self.bot.get_system_status()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        uptime = datetime.now() - self.demo_start_time
        uptime_str = str(uptime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
        
        logger.info("")
        logger.info(f"üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–ú–û #{iteration} ===")
        logger.info(f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}")
        logger.info(f"üèÉ –°—Ç–∞—Ç—É—Å: {'–†–ê–ë–û–¢–ê–ï–¢' if status['running'] else '–û–°–¢–ê–ù–û–í–õ–ï–ù'}")
        logger.info("")
        logger.info("üî¢ –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
        logger.info(f"  üìà –¢–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {status['total_pairs']}")
        logger.info(f"  ‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {status['total_tasks']}")
        logger.info(f"  üîç –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {status['total_analyses']}")
        logger.info(f"  üéØ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {status['total_signals']}")
        logger.info("")
        logger.info("‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        logger.info(f"  ‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞: {status['analysis_interval']}—Å")
        logger.info(f"  üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä: {status['pairs_update_interval']}—Å")
        logger.info(f"  üìÖ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(status['timeframes'])}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if status['total_analyses'] > 0:
            signal_rate = (status['total_signals'] / status['total_analyses']) * 100
            logger.info("")
            logger.info("üìà –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:")
            logger.info(f"  üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª–æ–≤: {signal_rate:.2f}%")
            
            # –ê–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            uptime_minutes = uptime.total_seconds() / 60
            if uptime_minutes > 0:
                analyses_per_minute = status['total_analyses'] / uptime_minutes
                logger.info(f"  ‚ö° –ê–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–∏–Ω—É—Ç—É: {analyses_per_minute:.1f}")
        
        logger.info("‚îÄ" * 50)
    
    async def graceful_shutdown(self):
        """
        Graceful shutdown –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        """
        logger.info("üõë –ù–∞—á–∏–Ω–∞—é graceful shutdown...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if self.stats_task and not self.stats_task.done():
            self.stats_task.cancel()
            try:
                await self.stats_task
            except asyncio.CancelledError:
                pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        if self.bot:
            self.bot.stop()
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ graceful shutdown
            await asyncio.sleep(2)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if self.bot:
            logger.info("")
            logger.info("üìä === –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–ú–û ===")
            status = self.bot.get_system_status()
            uptime = datetime.now() - self.demo_start_time
            
            logger.info(f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(uptime).split('.')[0]}")
            logger.info(f"üîç –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {status['total_analyses']}")
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {status['total_signals']}")
            logger.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞—Ä: {status['total_pairs']}")
            
            if status['total_analyses'] > 0:
                signal_rate = (status['total_signals'] / status['total_analyses']) * 100
                logger.info(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª–æ–≤: {signal_rate:.2f}%")
        
        logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def run_simple_test():
    """
    –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
    """
    logger.info("üß™ === –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ê–°–ò–ù–•–†–û–ù–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        bot = AsyncMexcAnalysisBot(
            timeframes=["Min1"],
            analysis_interval=60,
            pairs_update_interval=300
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä
        logger.info("üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä...")
        pairs = await bot.get_dynamic_pairs()
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
        
        if pairs:
            logger.info(f"üìã –ü—Ä–∏–º–µ—Ä—ã –ø–∞—Ä: {', '.join(pairs[:5])}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        logger.info("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ REST –∫–ª–∏–µ–Ω—Ç–∞...")
        
        test_pair = pairs[0] if pairs else "BTC_USDT"
        klines = await bot.async_client.get_klines_async(test_pair, "Min1", 10)
        
        if klines:
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(klines)} —Å–≤–µ—á–µ–π –¥–ª—è {test_pair}")
            logger.info(f"üìä –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: —Ü–µ–Ω–∞ {klines[-1].get('c', 'N/A')}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {test_pair}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        await bot.async_client.close()
        
        logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ—Å—Ç–µ: {e}")
        raise


def setup_signal_handlers():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è Windows
    """
    if os.name == 'nt':  # Windows
        # –ù–∞ Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º signal.signal –¥–ª—è SIGINT (Ctrl+C)
        def signal_handler(signum, frame):
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            raise KeyboardInterrupt()
        
        signal.signal(signal.SIGINT, signal_handler)


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    """
    print("üéØ MEXC Futures Async Bot Demo")
    print("=" * 50)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
    print("1. –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è (—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º)")
    print("2. –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    print("3. –í—ã—Ö–æ–¥")
    print("=" * 50)
    
    try:
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == "1":
            setup_signal_handlers()
            demo = AsyncBotDemo()
            await demo.run_demo()
            
        elif choice == "2":
            await run_simple_test()
            
        elif choice == "3":
            logger.info("üëã –í—ã—Ö–æ–¥ –∏–∑ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
            return
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return
            
    except KeyboardInterrupt:
        logger.info("üëã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ: {e}")
        sys.exit(1)
