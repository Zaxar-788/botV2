#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥—É–ª—è–º–∏

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å pairs_fetcher.py
2. –†–∞–±–æ—Ç—É —Å async_rest_client.py
3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å signals/detector.py
4. Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.utils.logger import setup_main_logger
from src.main import AsyncMexcAnalysisBot
from src.data.pairs_fetcher import get_pairs_fetcher
from src.data.async_rest_client import AsyncMexcRestClient
from src.signals.detector import VolumeSpikeDetector
from src.telegram.bot import TelegramNotifier
from src.data.database import SignalsManager
from src.config import DATABASE_CONFIG, CACHE_CONFIG

logger = setup_main_logger()


class AsyncIntegrationTest:
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    
    def __init__(self):
        self.test_results = {}
        self.start_time = datetime.now()
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üß™ === –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ê–°–ò–ù–•–†–û–ù–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ ===")
        logger.info(f"‚è∞ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {self.start_time}")
        logger.info("")
        
        tests = [
            ("pairs_fetcher", self.test_pairs_fetcher_integration),
            ("async_rest_client", self.test_async_rest_client),
            ("volume_detector", self.test_volume_detector_integration),
            ("telegram_notifier", self.test_telegram_integration),
            ("database", self.test_database_integration),
            ("full_async_bot", self.test_full_async_bot_creation),
            ("error_handling", self.test_error_handling),
        ]
        
        for test_name, test_func in tests:
            logger.info(f"üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            try:
                result = await test_func()
                self.test_results[test_name] = {
                    'status': 'PASS' if result else 'FAIL',
                    'details': '–£—Å–ø–µ—à–Ω–æ' if result else '–û—à–∏–±–∫–∞'
                }
                status_emoji = "‚úÖ" if result else "‚ùå"
                logger.info(f"{status_emoji} –¢–µ—Å—Ç {test_name}: {'PASS' if result else 'FAIL'}")
            except Exception as e:
                self.test_results[test_name] = {
                    'status': 'ERROR',
                    'details': str(e)
                }
                logger.error(f"üí• –¢–µ—Å—Ç {test_name}: ERROR - {e}")
            
            logger.info("")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        self.print_test_summary()
    
    async def test_pairs_fetcher_integration(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å pairs_fetcher"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ—Ç—á–µ—Ä –ø–∞—Ä
            pairs_fetcher = get_pairs_fetcher(update_interval=300)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä
            pairs = pairs_fetcher.get_all_pairs()
            
            if not pairs:
                logger.warning("‚ö†Ô∏è Pairs fetcher –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                return False
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(pairs)} –ø–∞—Ä —á–µ—Ä–µ–∑ pairs_fetcher")
            logger.info(f"üìã –ü—Ä–∏–º–µ—Ä—ã: {', '.join(pairs[:3])}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if hasattr(pairs_fetcher, 'start_auto_update'):
                pairs_fetcher.start_auto_update()
                logger.info("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä –∑–∞–ø—É—â–µ–Ω–æ")
                
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
                if hasattr(pairs_fetcher, 'stop_auto_update'):
                    pairs_fetcher.stop_auto_update()
                    logger.info("‚èπÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ pairs_fetcher: {e}")
            return False
    
    async def test_async_rest_client(self) -> bool:
        """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ REST –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            async with AsyncMexcRestClient() as client:
                # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                logger.info("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
                klines = await client.get_klines_async("BTC_USDT", "Min1", 5)
                
                if not klines:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTC_USDT")
                    return False
                
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(klines)} —Å–≤–µ—á–µ–π –¥–ª—è BTC_USDT")
                
                # –¢–µ—Å—Ç batch –∑–∞–ø—Ä–æ—Å–∞
                logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ batch –∑–∞–ø—Ä–æ—Å–∞...")
                test_pairs = ["BTC_USDT", "ETH_USDT"]
                test_timeframes = ["Min1"]
                
                batch_results = await client.get_batch_klines_for_pairs(
                    test_pairs, test_timeframes, 3
                )
                
                success_count = 0
                for pair, tf_data in batch_results.items():
                    for tf, data in tf_data.items():
                        if data:
                            success_count += 1
                
                logger.info(f"üìà Batch –∑–∞–ø—Ä–æ—Å: {success_count}/{len(test_pairs)} —É—Å–ø–µ—à–Ω—ã—Ö")
                
                return success_count > 0
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ async_rest_client: {e}")
            return False
    
    async def test_volume_detector_integration(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º –æ–±—ä–µ–º–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
            detector = VolumeSpikeDetector(threshold=2.0, window_size=5)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            async with AsyncMexcRestClient() as client:
                klines = await client.get_klines_async("BTC_USDT", "Min1", 20)
                
                if not klines:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞")
                    return False
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –≤ executor (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–∞...")
                signal = await asyncio.to_thread(
                    detector.analyze_volume_spike,
                    klines, "BTC_USDT", "Min1"
                )
                
                if signal:
                    logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal.message}")
                else:
                    logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –∞–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ volume_detector: {e}")
            return False
    
    async def test_telegram_integration(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)"""
        try:
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å
            telegram_notifier = TelegramNotifier()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–ª—Å—è
            if not telegram_notifier:
                return False
            
            logger.info("üì± Telegram notifier —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å mock —Ç–µ—Å—Ç –∏–ª–∏ dry-run —Ä–µ–∂–∏–º
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ telegram: {e}")
            return False
    
    async def test_database_integration(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
            signals_manager = SignalsManager(DATABASE_CONFIG, CACHE_CONFIG)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            stats = await asyncio.to_thread(signals_manager.get_full_statistics)
            
            if stats:
                db_stats = stats.get('database', {})
                logger.info(f"üíæ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, —Å–∏–≥–Ω–∞–ª–æ–≤: {db_stats.get('total_signals', 0)}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await asyncio.to_thread(signals_manager.close)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ database: {e}")
            return False
    
    async def test_full_async_bot_creation(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            bot = AsyncMexcAnalysisBot(
                timeframes=["Min1"],
                analysis_interval=60,
                pairs_update_interval=300
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if not bot.async_client:
                logger.error("‚ùå Async client –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return False
            
            if not bot.signals_detector:
                logger.error("‚ùå Signals detector –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return False
            
            if not bot.telegram_notifier:
                logger.error("‚ùå Telegram notifier –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return False
            
            if not bot.signals_manager:
                logger.error("‚ùå Signals manager –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return False
            
            if not bot.pairs_fetcher:
                logger.error("‚ùå Pairs fetcher –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä
            pairs = await bot.get_dynamic_pairs()
            if not pairs:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                return False
            
            logger.info(f"ü§ñ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, –¥–æ—Å—Ç—É–ø–Ω–æ {len(pairs)} –ø–∞—Ä")
            
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            await bot.async_client.close()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
            return False
    
    async def test_error_handling(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        try:
            logger.info("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–∞—Ä—É
            async with AsyncMexcRestClient() as client:
                klines = await client.get_klines_async("INVALID_PAIR", "Min1", 5)
                
                # –î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                if klines is None or len(klines) == 0:
                    logger.info("‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–∞—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–∞—Ä—ã")
            
            return True
            
        except Exception as e:
            # –û—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è gracefully
            logger.info(f"‚úÖ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {e}")
            return True
    
    def print_test_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        end_time = datetime.now()
        duration = end_time - self.start_time
        
        logger.info("üìä === –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
        logger.info(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        logger.info("")
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results.values() if r['status'] == 'PASS'])
        failed_tests = len([r for r in self.test_results.values() if r['status'] == 'FAIL'])
        error_tests = len([r for r in self.test_results.values() if r['status'] == 'ERROR'])
        
        logger.info(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {passed_tests}")
        logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        logger.info(f"üí• –û—à–∏–±–æ–∫: {error_tests}")
        logger.info("")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for test_name, result in self.test_results.items():
            status_emoji = {
                'PASS': '‚úÖ',
                'FAIL': '‚ùå',
                'ERROR': 'üí•'
            }.get(result['status'], '‚ùì')
            
            logger.info(f"{status_emoji} {test_name}: {result['status']} - {result['details']}")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        logger.info("")
        if failed_tests == 0 and error_tests == 0:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            logger.info("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            logger.warning("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
            logger.warning("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        test_runner = AsyncIntegrationTest()
        await test_runner.run_all_tests()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
