#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π

–ò–∑–±–µ–≥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å rate limiting MEXC —á–µ—Ä–µ–∑:
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
- –ö–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import logging
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.utils.logger import setup_main_logger
from src.data.ws_client import create_websocket_client, WSMessage, SubscriptionType
from src.data.pairs_fetcher import MexcPairsFetcher
from src.config import WEBSOCKET_CONFIG

logger = logging.getLogger(__name__)


class SimplifiedWebSocketTest:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç WebSocket —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
    
    def __init__(self):
        self.message_count = 0
        self.last_message_time = None
        self.processed_pairs = set()
        
    async def test_message_handler(self, message: WSMessage):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.message_count += 1
            self.last_message_time = datetime.now()
            self.processed_pairs.add(message.symbol)
            
            logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ #{self.message_count}: {message.channel} –¥–ª—è {message.symbol}")
            
            # –î–µ—Ç–∞–ª–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if self.message_count <= 5:
                if message.channel.startswith('kline_'):
                    data = message.data
                    logger.info(f"   üìä Kline: —Ü–µ–Ω–∞ {data.get('c', 'N/A')}, –æ–±—ä—ë–º {data.get('v', 'N/A')}")
                elif message.channel == 'ticker':
                    data = message.data
                    logger.info(f"   üìà Ticker: —Ü–µ–Ω–∞ {data.get('c', 'N/A')}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ {data.get('P', 'N/A')}%")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")

    async def test_limited_websocket_connection(self):
        """–¢–µ—Å—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        logger.info("üß™ –¢–µ—Å—Ç: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ—Ç—á–µ—Ä –ø–∞—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
            class LimitedPairsFetcher(MexcPairsFetcher):
                def get_all_pairs(self):
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    return ["BTC_USDT", "ETH_USDT", "BNB_USDT"]
            
            limited_fetcher = LimitedPairsFetcher(update_interval=3600)
            
            # –°–æ–∑–¥–∞–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            ws_client = create_websocket_client(
                pairs_fetcher=limited_fetcher,
                event_handler=self.test_message_handler,
                subscription_types=[SubscriptionType.TICKER]  # –¢–æ–ª—å–∫–æ —Ç–∏–∫–µ—Ä—ã –¥–ª—è –Ω–∞—á–∞–ª–∞
            )
            
            logger.info("‚úÖ WebSocket –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –Ω–∞ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            start_time = datetime.now()
            timeout = 15  # –í—Å–µ–≥–æ 15 —Å–µ–∫—É–Ω–¥
            
            task = asyncio.create_task(ws_client.start())
            
            # –û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            while (datetime.now() - start_time).seconds < timeout:
                await asyncio.sleep(1)
                
                if self.message_count > 0:
                    logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {self.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {len(self.processed_pairs)} –ø–∞—Ä")
                
                if self.message_count >= 5:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
                    logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                    break
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞...")
            await ws_client.stop()
            task.cancel()
            
            try:
                await task
            except asyncio.CancelledError:
                pass
            
            # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if self.message_count > 0:
                logger.info(f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω: –ø–æ–ª—É—á–µ–Ω–æ {self.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {len(self.processed_pairs)} –ø–∞—Ä")
                return True
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False

    async def test_integration_simulation(self):
        """–¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        logger.info("üß™ –¢–µ—Å—Ç: –°–∏–º—É–ª—è—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WebSocket")
        
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –≤ main.py
            test_messages = [
                WSMessage(
                    channel="ticker",
                    symbol="BTC_USDT",
                    data={"c": "43500.0", "P": "1.25", "v": "12345"},
                    timestamp=datetime.now()
                ),
                WSMessage(
                    channel="kline_Min1",
                    symbol="ETH_USDT", 
                    data={"c": "2650.0", "v": "8765", "t": str(int(datetime.now().timestamp()))},
                    timestamp=datetime.now()
                )
            ]
            
            logger.info("üåê –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            for msg in test_messages:
                await self.test_message_handler(msg)
                await asyncio.sleep(0.5)
            
            logger.info("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
            return False

    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ WebSocket")
        
        results = []
        
        # –¢–µ—Å—Ç 1: –°–∏–º—É–ª—è—Ü–∏—è (–≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
        result1 = await self.test_integration_simulation()
        results.append(("–°–∏–º—É–ª—è—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", result1))
        
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç 2: –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –∏–∑-–∑–∞ API –ª–∏–º–∏—Ç–æ–≤)
        result2 = await self.test_limited_websocket_connection()
        results.append(("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", result2))
        
        # –ò—Ç–æ–≥–∏
        logger.info("üìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–ü–†–û–©–ï–ù–ù–´–• –¢–ï–°–¢–û–í ===")
        passed = 0
        for test_name, result in results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            logger.info(f"   {test_name}: {status}")
            if result:
                passed += 1
        
        logger.info(f"üìà –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(results)}")
        
        if passed >= 1:  # –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
            logger.info("üéâ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–∞–±–æ—á—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é!")
            return True
        else:
            logger.warning("‚ö†Ô∏è –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    setup_main_logger()
    
    logger.info("üß™ === –£–ü–†–û–©–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WEBSOCKET ===")
    logger.info("üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ API")
    
    try:
        tester = SimplifiedWebSocketTest()
        success = await tester.run_tests()
        
        if success:
            logger.info("‚úÖ –¢–µ—Å—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.")
            return 0
        else:
            logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π.")
            return 1
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        return 0
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    exit(asyncio.run(main()))
