"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è WebSocket –∫–ª–∏–µ–Ω—Ç–∞ MEXC Futures

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
- –ù–∞—Å—Ç—Ä–æ–π–∫—É –∏ –∑–∞–ø—É—Å–∫ WebSocket –∫–ª–∏–µ–Ω—Ç–∞
- –û–±—Ä–∞–±–æ—Ç–∫—É real-time –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤—Å–µ—Ö 750+ –ø–∞—Ä
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º –∞–Ω–æ–º–∞–ª–∏–π
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π

–ê–≤—Ç–æ—Ä: GitHub Copilot
"""

import asyncio
import logging
import signal
import sys
from datetime import datetime
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, 'g:/Project_VSC/BotV2')

from src.data.ws_client import (
    MexcWebSocketClient, 
    WSMessage, 
    SubscriptionType,
    create_websocket_client
)
from src.data.pairs_fetcher import get_pairs_fetcher
from src.signals.detector import VolumeSpikeDetector
from src.utils.logger import setup_main_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_main_logger("demo_ws_client", level=logging.INFO)


class RealTimeAnalyzer:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä real-time –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.volume_detector = VolumeSpikeDetector(
            threshold=2.5,  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è real-time
            window_size=20  # –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.message_count = 0
        self.ticker_count = 0
        self.kline_count = 0
        self.start_time = datetime.now()
        self.pairs_data: Dict[str, Dict[str, Any]] = {}
        
        logger.info("üéØ Real-time –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def handle_realtime_message(self, message: WSMessage) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ real-time —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            message: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebSocket
        """
        try:
            self.message_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ä–µ
            if message.symbol not in self.pairs_data:
                self.pairs_data[message.symbol] = {
                    "last_ticker": None,
                    "last_kline": None,
                    "volume_history": [],
                    "message_count": 0
                }
            
            pair_data = self.pairs_data[message.symbol]
            pair_data["message_count"] += 1
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            if "ticker" in message.channel:
                await self._handle_ticker_message(message, pair_data)
            elif "kline" in message.channel:
                await self._handle_kline_message(message, pair_data)
            elif "depth" in message.channel:
                await self._handle_depth_message(message, pair_data)
            elif "deals" in message.channel:
                await self._handle_deals_message(message, pair_data)
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if self.message_count % 1000 == 0:
                await self._print_statistics()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.symbol}: {e}")

    async def _handle_ticker_message(self, message: WSMessage, pair_data: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ä–∞"""
        self.ticker_count += 1
        pair_data["last_ticker"] = message.data
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ 100-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if self.ticker_count % 100 == 0:
            logger.debug(f"üìä –¢–∏–∫–µ—Ä {message.symbol}: {message.data}")

    async def _handle_kline_message(self, message: WSMessage, pair_data: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–≤–µ—á–µ–π (K-line)"""
        self.kline_count += 1
        pair_data["last_kline"] = message.data
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä—ë–º
        kline_data = message.data
        if isinstance(kline_data, dict) and "v" in kline_data:
            try:
                volume = float(kline_data["v"])
                pair_data["volume_history"].append(volume)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—ä—ë–º–æ–≤
                if len(pair_data["volume_history"]) > 50:
                    pair_data["volume_history"] = pair_data["volume_history"][-50:]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∞–π–∫ –æ–±—ä—ë–º–∞
                await self._check_volume_spike(message.symbol, pair_data["volume_history"])
                
            except (ValueError, TypeError) as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—ë–º–∞ –¥–ª—è {message.symbol}: {e}")

    async def _handle_depth_message(self, message: WSMessage, pair_data: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞–∫–∞–Ω–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≥–ª—É–±–∏–Ω—ã —Ä—ã–Ω–∫–∞
        logger.debug(f"üìà –°—Ç–∞–∫–∞–Ω {message.symbol}: {len(message.data)} —É—Ä–æ–≤–Ω–µ–π")

    async def _handle_deals_message(self, message: WSMessage, pair_data: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–¥–µ–ª–æ–∫"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–∞ —Å–¥–µ–ª–æ–∫
        logger.debug(f"üí∞ –°–¥–µ–ª–∫–∏ {message.symbol}: {message.data}")

    async def _check_volume_spike(self, symbol: str, volume_history: list) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–π–∫–∞ –æ–±—ä—ë–º–∞ –≤ real-time"""
        if len(volume_history) < 10:
            return
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä—ë–º —Å–æ —Å—Ä–µ–¥–Ω–∏–º
            current_volume = volume_history[-1]
            avg_volume = sum(volume_history[:-1]) / len(volume_history[:-1])
            
            if avg_volume > 0 and current_volume / avg_volume > 3.0:
                logger.info(f"üö® –°–ü–ê–ô–ö –û–ë–™–Å–ú–ê: {symbol} - "
                           f"–¢–µ–∫—É—â–∏–π: {current_volume:.2f}, –°—Ä–µ–¥–Ω–∏–π: {avg_volume:.2f}, "
                           f"–û—Ç–Ω–æ—à–µ–Ω–∏–µ: {current_volume/avg_volume:.2f}x")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–∞–π–∫–∞ –æ–±—ä—ë–º–∞ {symbol}: {e}")

    async def _print_statistics(self) -> None:
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        uptime = (datetime.now() - self.start_time).total_seconds()
        msg_per_sec = self.message_count / uptime if uptime > 0 else 0
        
        logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê REAL-TIME –ê–ù–ê–õ–ò–ó–ê:")
        logger.info(f"   ‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime:.1f}s")
        logger.info(f"   üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.message_count}")
        logger.info(f"   üìà –¢–∏–∫–µ—Ä—ã: {self.ticker_count}")
        logger.info(f"   üïØÔ∏è  –°–≤–µ—á–∏: {self.kline_count}")
        logger.info(f"   üèÉ –°–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫: {msg_per_sec:.1f}")
        logger.info(f"   üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {len(self.pairs_data)}")

    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è"""
        uptime = (datetime.now() - self.start_time).total_seconds()
        msg_per_sec = self.message_count / uptime if uptime > 0 else 0
        
        return {
            "uptime_seconds": uptime,
            "total_messages": self.message_count,
            "ticker_messages": self.ticker_count,
            "kline_messages": self.kline_count,
            "messages_per_second": msg_per_sec,
            "active_pairs": len(self.pairs_data),
            "pairs_with_data": list(self.pairs_data.keys())[:10]  # –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        }


async def demo_websocket_analysis():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã WebSocket –∫–ª–∏–µ–Ω—Ç–∞ —Å real-time –∞–Ω–∞–ª–∏–∑–æ–º
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ WebSocket –∞–Ω–∞–ª–∏–∑–∞ MEXC Futures...")
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = RealTimeAnalyzer()
    
    # –°–æ–∑–¥–∞–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç
    ws_client = create_websocket_client(
        subscription_types=[
            SubscriptionType.TICKER,      # –î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞
            SubscriptionType.KLINE_1M,    # 1-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
            SubscriptionType.KLINE_5M,    # 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
        ],
        event_handler=analyzer.handle_realtime_message
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    shutdown_event = asyncio.Event()
    
    def signal_handler():
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        shutdown_event.set()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    for sig in (signal.SIGTERM, signal.SIGINT):
        signal.signal(sig, lambda s, f: signal_handler())
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç
        client_task = asyncio.create_task(
            ws_client.start(),
            name="websocket_client"
        )
        
        # –ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        async def periodic_stats():
            while not shutdown_event.is_set():
                await asyncio.sleep(30)  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
                if not shutdown_event.is_set():
                    logger.info("üìà –°–¢–ê–¢–£–° WebSocket –ö–õ–ò–ï–ù–¢–ê:")
                    status = ws_client.get_status()
                    logger.info(f"   üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {status['connections_count']}")
                    logger.info(f"   üìä –ü–∞—Ä: {status['total_pairs']}")
                    logger.info(f"   üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {status['total_messages_processed']}")
                    logger.info(f"   ‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status['uptime_seconds']:.1f}s")
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
                    analyzer_stats = analyzer.get_statistics()
                    logger.info(f"   üéØ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: {analyzer_stats['messages_per_second']:.1f} msg/s")
        
        stats_task = asyncio.create_task(
            periodic_stats(),
            name="periodic_stats"
        )
        
        logger.info("‚úÖ WebSocket –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")
        logger.info("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
        # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await shutdown_event.wait()
        
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –∫–ª–∏–µ–Ω—Ç–∞...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await ws_client.stop()
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏
        for task in [client_task, stats_task]:
            if not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
        
        logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def demo_simple_websocket():
    """
    –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    """
    logger.info("üåê –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    message_count = 0
    
    async def simple_handler(message: WSMessage):
        nonlocal message_count
        message_count += 1
        
        if message_count <= 10:  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ #{message_count}:")
            logger.info(f"   üì° –ö–∞–Ω–∞–ª: {message.channel}")
            logger.info(f"   üí± –ü–∞—Ä–∞: {message.symbol}")
            logger.info(f"   üìä –î–∞–Ω–Ω—ã–µ: {message.data}")
        elif message_count % 100 == 0:  # –ü–æ—Ç–æ–º –∫–∞–∂–¥–æ–µ 100-–µ
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–∏–∫–µ—Ä–∞–º–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞
    ws_client = create_websocket_client(
        subscription_types=[SubscriptionType.TICKER],
        event_handler=simple_handler
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
        logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥...")
        await asyncio.wait_for(ws_client.start(), timeout=60)
        
    except asyncio.TimeoutError:
        logger.info("‚è∞ –¢–∞–π–º-–∞—É—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await ws_client.stop()
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è WebSocket –∫–ª–∏–µ–Ω—Ç–∞ MEXC")
    parser.add_argument(
        "--mode", 
        choices=["simple", "full"], 
        default="full",
        help="–†–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: simple - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç, full - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    )
    
    args = parser.parse_args()
    
    if args.mode == "simple":
        await demo_simple_websocket()
    else:
        await demo_websocket_analysis()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
