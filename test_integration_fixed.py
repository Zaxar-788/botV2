#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ë–î —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º MexcAnalysisBot.
"""

import time
import logging
from src.main import MexcAnalysisBot
from src.config import TRADING_PAIRS, TIMEFRAMES
from src.data.database import StoredSignal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
logging.getLogger('src.main').setLevel(logging.INFO)
logging.getLogger('src.data.database').setLevel(logging.INFO)

def test_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ë–î —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º"""
    print("üß™ === –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ë–î –° –û–°–ù–û–í–ù–´–ú –ë–û–¢–û–ú ===")
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_pairs = ["BTC_USDT", "ETH_USDT"]
    test_timeframes = ["Min1", "Min5"]
    
    print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –ø–∞—Ä—ã: {', '.join(test_pairs)}")
    print(f"‚è∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(test_timeframes)}")
    print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = MexcAnalysisBot(
        pairs=test_pairs,
        timeframes=test_timeframes
    )
    
    print("üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:")
    bot.print_database_statistics()
    print()
    
    print("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ 3 –∏—Ç–µ—Ä–∞—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞...")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞
    for i in range(3):
        print(f"üìä –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/3...")
        
        try:
            # –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
            signals = bot.analyze_single_iteration()
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals) if signals else 0}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
            time.sleep(2)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {i+1}: {e}")
            continue
    
    print()
    print("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:")
    bot.print_database_statistics()
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏—Å—Ç–æ—Ä–∏–∏...")
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–∞
        history_data = bot.get_signals_history(limit=5)
        print(f"üìú –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {len(history_data)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        if history_data:
            print("üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã:")
            for signal_dict in history_data:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å –∏–∑ –ë–î
                timestamp_str = time.strftime('%H:%M:%S', time.localtime(signal_dict['timestamp']/1000))
                print(f"   ‚Ä¢ {signal_dict['pair']} ({signal_dict['timeframe']}) - {timestamp_str} - —Å–ø–∞–π–∫ {signal_dict['spike_ratio']:.1f}x")
        else:
            print("   üìù –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)")
        
        print()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_file = f"integration_test_export_{int(time.time())}.csv"
        exported_count = bot.export_signals_history(export_file, limit=10)
        print(f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {exported_count} —Å–∏–≥–Ω–∞–ª–æ–≤ ‚Üí {export_file}")
        print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–∞
    print("üõë –ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–∞...")
    bot.stop()
    
    print("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
    print()
    print("üí° –†–µ–∑—É–ª—å—Ç–∞—Ç: –°–∏—Å—Ç–µ–º–∞ –ë–î –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º")

if __name__ == "__main__":
    test_integration()
